# ====================================================================
# Lamsa Docker Environment Configuration Template
# ====================================================================
# This file contains all environment variables needed for Docker deployment
# Copy this file to .env.docker and set your actual values
# NEVER commit .env.docker files to version control!
#
# USAGE:
# 1. Copy this file: cp .env.docker.template .env.docker
# 2. Fill in all required values
# 3. Run: docker-compose --env-file .env.docker up -d

# ====================================================================
# DEPLOYMENT ENVIRONMENT
# ====================================================================

# Deployment Type (development, staging, production)
DEPLOYMENT_ENV=production
NODE_ENV=production

# ====================================================================
# CORE SERVICES CONFIGURATION
# ====================================================================

# Supabase Database Configuration
SUPABASE_URL=https://your-project-id.supabase.co
SUPABASE_ANON_KEY=your_supabase_anon_key_here
SUPABASE_SERVICE_KEY=your_supabase_service_key_here
DATABASE_URL=postgresql://postgres:password@db.your-project-id.supabase.co:5432/postgres

# Redis Configuration
# Generate password: openssl rand -hex 32
REDIS_PASSWORD=your_secure_redis_password_here
REDIS_DB=0
REDIS_MAX_RETRIES=3
REDIS_RETRY_DELAY=1000

# ====================================================================
# AUTHENTICATION & SECURITY
# ====================================================================

# JWT Configuration
# Generate: openssl rand -hex 64
JWT_SECRET=your_secure_jwt_secret_minimum_64_characters_here
JWT_EXPIRES_IN=15m
REFRESH_TOKEN_EXPIRES_IN=7d

# Session Security
# Generate: openssl rand -hex 32
SESSION_SECRET=your_secure_session_secret_here

# ====================================================================
# APPLICATION SETTINGS
# ====================================================================

# Basic App Configuration
APP_NAME=Lamsa
APP_VERSION=1.0.0
DEFAULT_LANGUAGE=ar
CURRENCY=JOD
TIMEZONE=Asia/Amman
PORT=3000

# Business Configuration
VAT_RATE=0.15
DEFAULT_OPEN_TIME=09:00
DEFAULT_CLOSE_TIME=21:00

# ====================================================================
# EXTERNAL SERVICES
# ====================================================================

# Tap Payment Gateway
TAP_SECRET_KEY=sk_live_your_tap_secret_key
TAP_PUBLIC_KEY=pk_live_your_tap_public_key
TAP_API_URL=https://api.tap.company/v2
TAP_WEBHOOK_SECRET=your_tap_webhook_secret

# Twilio SMS Service
TWILIO_ACCOUNT_SID=your_twilio_account_sid
TWILIO_AUTH_TOKEN=your_twilio_auth_token
TWILIO_PHONE_NUMBER=+962700000000
TWILIO_VERIFY_SERVICE_SID=your_twilio_verify_service

# Push Notifications
EXPO_PUSH_TOKEN=your_expo_push_token
FIREBASE_SERVICE_ACCOUNT=/secrets/firebase-service-account.json

# Google Services
GOOGLE_MAPS_API_KEY=your_google_maps_api_key

# ====================================================================
# MONITORING & LOGGING
# ====================================================================

# Sentry Error Tracking
SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id
SENTRY_ENVIRONMENT=production
SENTRY_RELEASE=lamsa@1.0.0

# New Relic APM
NEW_RELIC_LICENSE_KEY=your_newrelic_license_key
NEW_RELIC_APP_NAME=Lamsa-API-Docker
ENABLE_NEWRELIC=true

# Logging Configuration
LOG_LEVEL=info
ENABLE_MORGAN_LOGGING=true
ENABLE_DETAILED_LOGGING=false
ENABLE_PERFORMANCE_MONITORING=true

# Prometheus Metrics
ENABLE_PROMETHEUS=true
PROMETHEUS_PORT=9090

# ====================================================================
# ALERTING
# ====================================================================

# Slack Notifications
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/xxx/xxx/xxx
SLACK_CHANNEL_CRITICAL=#docker-alerts-critical
SLACK_CHANNEL_WARNINGS=#docker-alerts-warnings

# Email Alerts
SENDGRID_API_KEY=your_sendgrid_api_key
ALERT_FROM_EMAIL=alerts@lamsa.com
CRITICAL_ALERT_EMAILS=devops@lamsa.com

# ====================================================================
# NETWORKING & SECURITY
# ====================================================================

# CORS Configuration
CORS_ORIGINS=https://lamsa.com,https://app.lamsa.com,https://admin.lamsa.com
CORS_CREDENTIALS=true

# Rate Limiting
ENABLE_RATE_LIMITING=true
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# Security Headers
ENABLE_HELMET=true
HSTS_MAX_AGE=31536000

# ====================================================================
# DOCKER-SPECIFIC CONFIGURATION
# ====================================================================

# Container Resource Limits
API_MEMORY_LIMIT=1024m
API_CPU_LIMIT=1.0
REDIS_MEMORY_LIMIT=512m
REDIS_CPU_LIMIT=0.5
NGINX_MEMORY_LIMIT=256m
NGINX_CPU_LIMIT=0.25

# Health Check Configuration
HEALTH_CHECK_INTERVAL=30s
HEALTH_CHECK_TIMEOUT=10s
HEALTH_CHECK_RETRIES=3
HEALTH_CHECK_START_PERIOD=40s

# Restart Policies
RESTART_POLICY=unless-stopped

# ====================================================================
# VOLUMES & PERSISTENCE
# ====================================================================

# Volume Paths (Docker volumes)
REDIS_DATA_VOLUME=redis_data
UPLOAD_DATA_VOLUME=upload_data
LOG_DATA_VOLUME=log_data

# Backup Configuration
BACKUP_ENABLED=true
BACKUP_SCHEDULE="0 2 * * *"
BACKUP_RETENTION_DAYS=30

# ====================================================================
# NGINX CONFIGURATION (if using nginx proxy)
# ====================================================================

# SSL Configuration
SSL_ENABLED=true
SSL_CERT_PATH=/etc/letsencrypt/live/lamsa.com/fullchain.pem
SSL_KEY_PATH=/etc/letsencrypt/live/lamsa.com/privkey.pem

# Proxy Settings
NGINX_WORKER_PROCESSES=auto
NGINX_WORKER_CONNECTIONS=1024
CLIENT_MAX_BODY_SIZE=50M

# ====================================================================
# FEATURE FLAGS
# ====================================================================

ENABLE_SWAGGER=false
ENABLE_WEBSOCKETS=true
ENABLE_CACHING=true
ENABLE_COMPRESSION=true
ENABLE_DEBUG=false
ENABLE_MOCK_PAYMENTS=false
ENABLE_MOCK_SMS=false

# ====================================================================
# DEPLOYMENT SETTINGS
# ====================================================================

# Docker Swarm / Kubernetes
DEPLOYMENT_PLATFORM=docker-compose
SERVICE_REPLICAS=1
UPDATE_PARALLELISM=1
UPDATE_DELAY=10s

# ====================================================================
# WEB DASHBOARD SETTINGS
# ====================================================================

# Next.js Web Dashboard
NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL}
NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
NEXT_PUBLIC_API_URL=http://api:3000
NEXT_PUBLIC_APP_NAME=${APP_NAME}
NEXT_PUBLIC_DEFAULT_LANGUAGE=${DEFAULT_LANGUAGE}
NEXT_PUBLIC_CURRENCY=${CURRENCY}
NEXT_PUBLIC_ENV=${DEPLOYMENT_ENV}

# NextAuth
NEXTAUTH_SECRET=your_nextauth_secret_here
NEXTAUTH_URL=http://localhost:3001

# ====================================================================
# DOCKER DEPLOYMENT CHECKLIST
# ====================================================================
# 
# Before running docker-compose:
# 
# Environment:
# ✅ Copy this file to .env.docker
# ✅ Fill in all required values
# ✅ Generate secure secrets for JWT, Redis, etc.
# ✅ Verify all external service credentials
# 
# Security:
# ✅ Use strong passwords (no defaults)
# ✅ Set proper CORS origins
# ✅ Enable rate limiting
# ✅ Configure SSL certificates (for production)
# 
# Resources:
# ✅ Set appropriate memory/CPU limits
# ✅ Configure health checks
# ✅ Set restart policies
# 
# Volumes:
# ✅ Ensure volume paths are correct
# ✅ Set up backup strategy
# ✅ Test data persistence
# 
# Monitoring:
# ✅ Configure Sentry DSN
# ✅ Set up log aggregation
# ✅ Enable metrics collection
# 
# DOCKER COMMANDS:
# 
# Development:
# docker-compose --env-file .env.docker -f docker-compose.yml -f docker-compose.dev.yml up
# 
# Production:
# docker-compose --env-file .env.docker up -d
# 
# Minimal Deployment:
# docker-compose --env-file .env.docker -f docker-compose.minimal.yml up -d
# 
# View logs:
# docker-compose logs -f api
# 
# Scale services:
# docker-compose up -d --scale api=3
# 
# Update services:
# docker-compose pull && docker-compose up -d