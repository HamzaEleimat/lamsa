name: Database Migration

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'supabase/migrations/**'
      - '.github/workflows/database-migration.yml'
  pull_request:
    paths:
      - 'supabase/migrations/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  validate-migrations:
    name: Validate Migrations
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Supabase CLI
        run: |
          npm install -g supabase
          supabase --version
          
      - name: Validate migration files
        run: |
          echo "Checking migration files..."
          for file in supabase/migrations/*.sql; do
            if [ -f "$file" ]; then
              echo "Validating: $file"
              # Basic SQL syntax check
              if ! grep -q ";" "$file"; then
                echo "Error: Migration file $file appears to be empty or invalid"
                exit 1
              fi
            fi
          done
          
      - name: Check migration naming
        run: |
          # Ensure migrations follow naming convention
          for file in supabase/migrations/*.sql; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              if ! [[ "$filename" =~ ^[0-9]{14}_.*\.sql$ ]]; then
                echo "Error: Migration file $filename doesn't follow naming convention (YYYYMMDDHHMMSS_description.sql)"
                exit 1
              fi
            fi
          done

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: validate-migrations
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/develop' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Supabase CLI
        run: |
          npm install -g supabase
          supabase --version
          
      - name: Deploy to Staging
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}
          SUPABASE_PROJECT_ID: ${{ secrets.STAGING_PROJECT_ID }}
        run: |
          # Link to staging project
          supabase link --project-ref $SUPABASE_PROJECT_ID
          
          # Run migrations
          supabase db push --password $SUPABASE_DB_PASSWORD
          
      - name: Verify deployment
        run: |
          supabase migration list

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: validate-migrations
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Supabase CLI
        run: |
          npm install -g supabase
          supabase --version
          
      - name: Create backup
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.PRODUCTION_PROJECT_ID }}
        run: |
          echo "Creating database backup..."
          # Note: Implement backup strategy based on your needs
          # This could be using pg_dump or Supabase's backup features
          
      - name: Deploy to Production
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.PRODUCTION_DB_PASSWORD }}
          SUPABASE_PROJECT_ID: ${{ secrets.PRODUCTION_PROJECT_ID }}
        run: |
          # Link to production project
          supabase link --project-ref $SUPABASE_PROJECT_ID
          
          # Run migrations with extra caution
          supabase db push --password $SUPABASE_DB_PASSWORD
          
      - name: Verify deployment
        run: |
          supabase migration list
          
      - name: Notify team
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Production database migration ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true