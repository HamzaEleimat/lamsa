name: Web Dashboard Deployment Pipeline

on:
  push:
    branches: [main]
    paths:
      - 'lamsa-web/**'
      - '.github/workflows/web-deployment.yml'
  pull_request:
    branches: [main]
    paths:
      - 'lamsa-web/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/lamsa-web

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: lamsa-web/package-lock.json
          
      - name: Install dependencies
        run: |
          cd lamsa-web
          npm ci
          
      - name: Run TypeScript check
        run: |
          cd lamsa-web
          npm run type-check
          
      - name: Run linting
        run: |
          cd lamsa-web
          npm run lint
          
      - name: Run tests
        run: |
          cd lamsa-web
          npm test
        env:
          NODE_ENV: test
          
      - name: Build application
        run: |
          cd lamsa-web
          npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_API_URL: ${{ secrets.STAGING_API_URL }}

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: lamsa-web/package-lock.json
          
      - name: Install dependencies
        run: |
          cd lamsa-web
          npm ci
          
      - name: Run security audit
        run: |
          cd lamsa-web
          npm audit --audit-level=moderate
          
      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./lamsa-web
          file: ./lamsa-web/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.PRODUCTION_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.PRODUCTION_SUPABASE_ANON_KEY }}
            NEXT_PUBLIC_API_URL=${{ secrets.PRODUCTION_API_URL }}
            
      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy-vercel-staging:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Vercel Staging
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: lamsa-web
          scope: ${{ secrets.VERCEL_TEAM_ID }}
          
  deploy-vercel-production:
    runs-on: ubuntu-latest
    needs: [test, deploy-vercel-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: lamsa-web
          scope: ${{ secrets.VERCEL_TEAM_ID }}

  lighthouse:
    runs-on: ubuntu-latest
    needs: deploy-vercel-staging
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lamsa-web/.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
          
      - name: Comment PR with Lighthouse results
        uses: thollander/actions-comment-pull-request@v2
        if: github.event_name == 'pull_request'
        with:
          message: |
            ## Lighthouse Performance Report ðŸš€
            
            The Lighthouse performance audit has been completed. Check the detailed report in the artifacts.
            
            Key metrics:
            - Performance: Check artifacts
            - Accessibility: Check artifacts
            - Best Practices: Check artifacts
            - SEO: Check artifacts

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-vercel-production]
    if: always()
    
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.deploy-vercel-production.result }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: always()