name: Mobile App Release Workflow

on:
  push:
    branches: [ main, beta, staging ]
    paths: [ 'lamsa-mobile/**' ]
  pull_request:
    branches: [ main, beta, staging ]
    paths: [ 'lamsa-mobile/**' ]

env:
  WORKING_DIRECTORY: lamsa-mobile

jobs:
  version-check:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.version-check.outputs.should-release }}
      version: ${{ steps.version-check.outputs.version }}
      branch: ${{ steps.version-check.outputs.branch }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

    - name: Check version and determine release type
      id: version-check
      run: |
        cd ${{ env.WORKING_DIRECTORY }}
        
        # Get current version from version.json
        CURRENT_VERSION=$(node -p "require('./version.json').version")
        
        # Determine branch type
        BRANCH=${GITHUB_REF#refs/heads/}
        echo "branch=$BRANCH" >> $GITHUB_OUTPUT
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Check if this is a release branch push
        if [[ "$BRANCH" == "main" ]] || [[ "$BRANCH" == "beta" ]] || [[ "$BRANCH" == "staging" ]]; then
          echo "should-release=true" >> $GITHUB_OUTPUT
        else
          echo "should-release=false" >> $GITHUB_OUTPUT
        fi

  build-and-test:
    runs-on: ubuntu-latest
    needs: version-check
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

    - name: Install dependencies
      run: |
        cd ${{ env.WORKING_DIRECTORY }}
        npm ci

    - name: Check TypeScript
      run: |
        cd ${{ env.WORKING_DIRECTORY }}
        npx tsc --noEmit

    - name: Run tests
      run: |
        cd ${{ env.WORKING_DIRECTORY }}
        # Add test command when tests are implemented
        echo "Tests will be added here"

    - name: Validate app.json
      run: |
        cd ${{ env.WORKING_DIRECTORY }}
        node -e "console.log('app.json is valid:', !!require('./app.json').expo)"

  version-bump:
    runs-on: ubuntu-latest
    needs: [version-check, build-and-test]
    if: needs.version-check.outputs.should-release == 'true' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Bump version based on branch
      run: |
        cd ${{ env.WORKING_DIRECTORY }}
        
        BRANCH="${{ needs.version-check.outputs.branch }}"
        
        if [[ "$BRANCH" == "main" ]]; then
          # Production release - patch version
          node scripts/version-bump.js patch both production
          CHANNEL="production"
        elif [[ "$BRANCH" == "beta" ]]; then
          # Beta release - minor version
          node scripts/version-bump.js minor both beta
          CHANNEL="beta"
        elif [[ "$BRANCH" == "staging" ]]; then
          # Staging release - patch version
          node scripts/version-bump.js patch both staging
          CHANNEL="staging"
        fi
        
        # Generate release notes
        NEW_VERSION=$(node -p "require('./version.json').version")
        node scripts/release-notes.js $NEW_VERSION
        
        echo "CHANNEL=$CHANNEL" >> $GITHUB_ENV
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

    - name: Commit version changes
      run: |
        cd ${{ env.WORKING_DIRECTORY }}
        git add version.json app.json package.json
        git commit -m "chore: bump version to ${{ env.NEW_VERSION }} [${{ env.CHANNEL }}]"

    - name: Create Git tag
      run: |
        cd ${{ env.WORKING_DIRECTORY }}
        BUILD_IOS=$(node -p "require('./version.json').buildNumber.ios")
        BUILD_ANDROID=$(node -p "require('./version.json').buildNumber.android")
        
        git tag -a "v${{ env.NEW_VERSION }}-ios-$BUILD_IOS" -m "iOS build $BUILD_IOS for version ${{ env.NEW_VERSION }}"
        git tag -a "v${{ env.NEW_VERSION }}-android-$BUILD_ANDROID" -m "Android build $BUILD_ANDROID for version ${{ env.NEW_VERSION }}"

    - name: Push changes
      run: |
        git push origin ${{ needs.version-check.outputs.branch }}
        git push origin --tags

  expo-publish:
    runs-on: ubuntu-latest
    needs: [version-check, build-and-test, version-bump]
    if: needs.version-check.outputs.should-release == 'true' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ needs.version-check.outputs.branch }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

    - name: Setup Expo CLI
      run: npm install -g @expo/cli

    - name: Install dependencies
      run: |
        cd ${{ env.WORKING_DIRECTORY }}
        npm ci

    - name: Publish to Expo (OTA Update)
      run: |
        cd ${{ env.WORKING_DIRECTORY }}
        
        BRANCH="${{ needs.version-check.outputs.branch }}"
        
        if [[ "$BRANCH" == "main" ]]; then
          CHANNEL="production"
        elif [[ "$BRANCH" == "beta" ]]; then
          CHANNEL="beta"
        elif [[ "$BRANCH" == "staging" ]]; then
          CHANNEL="staging"
        fi
        
        echo "Publishing OTA update to $CHANNEL channel..."
        # Uncomment when Expo credentials are available
        # expo publish --release-channel=$CHANNEL
        echo "OTA publish command: expo publish --release-channel=$CHANNEL"

  notify-completion:
    runs-on: ubuntu-latest
    needs: [version-check, build-and-test, version-bump, expo-publish]
    if: always() && needs.version-check.outputs.should-release == 'true'
    
    steps:
    - name: Notify deployment status
      run: |
        echo "ðŸš€ Mobile app deployment completed!"
        echo "ðŸ“± Version: ${{ needs.version-check.outputs.version }}"
        echo "ðŸŒ¿ Branch: ${{ needs.version-check.outputs.branch }}"
        echo "âœ… Build Status: ${{ job.status }}"
