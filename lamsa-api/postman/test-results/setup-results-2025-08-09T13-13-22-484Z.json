{
  "collection": {
    "_": {
      "postman_id": "lamsa-api-test-data-setup",
      "exporter_id": "lamsa-dev-team"
    },
    "item": [
      {
        "id": "38c0ec97-f3c5-481c-bc24-577545f45506",
        "name": "Pre-flight Checks",
        "item": [
          {
            "id": "2b7ba948-7665-4d59-9285-34d336c4c3d0",
            "name": "Health Check",
            "request": {
              "description": {
                "content": "Verifies the API server is running and database is connected before creating test data.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e050ae7b-ac62-4a04-9bf6-24227fb2a766",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"API server is healthy\", function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.success).to.be.true;",
                    "    pm.expect(response.data.status).to.equal('healthy');",
                    "    ",
                    "    console.log('‚úÖ API server is running and healthy');",
                    "});",
                    "",
                    "pm.test(\"Database connection is active\", function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.data.database.status).to.equal('connected');",
                    "    ",
                    "    console.log('‚úÖ Database connection confirmed');",
                    "});"
                  ],
                  "_lastExecutionId": "b702ab52-0351-482c-bacd-a019f5102b8b"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "75958526-7f65-40d0-8ad8-56d7139eb9de",
                  "type": "text/javascript",
                  "exec": [
                    "console.log('üè• Checking API server health...');"
                  ],
                  "_lastExecutionId": "739123cc-3546-4823-aaa2-9bf7b2ef081d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "723b6426-54db-468b-b1f9-9f728c4ddfe8",
        "name": "Authentication Setup",
        "item": [
          {
            "id": "c546d815-b3f1-459e-ba88-c8e5e3c47986",
            "name": "Get CSRF Token",
            "request": {
              "url": {
                "path": [
                  "api",
                  "csrf-token"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a2f4a4a2-b920-4e00-b931-941391bd6814",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"CSRF token retrieved\", function () {",
                    "    pm.response.to.have.status(200);",
                    "    const token = pm.response.json().csrfToken;",
                    "    pm.expect(token).to.be.a('string');",
                    "    pm.environment.set(\"csrf_token\", token);",
                    "});"
                  ],
                  "_lastExecutionId": "031f890b-2740-4836-ba3e-8771f0c7235e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1c7deb03-74a7-4e4b-9af6-10e2ac4181e3",
        "name": "Test Providers",
        "item": [
          {
            "id": "87b466e4-a4d1-4eeb-be8b-dfecc6173763",
            "name": "Create Test Provider 1",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "provider",
                  "signup"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "X-CSRF-Token",
                  "value": "{{csrf_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"{{temp_provider_email}}\",\n  \"password\": \"{{temp_provider_password}}\",\n  \"phone\": \"{{temp_provider_phone}}\",\n  \"business_name_ar\": \"{{temp_business_name_ar}}\",\n  \"business_name_en\": \"{{temp_business_name_en}}\",\n  \"owner_name\": \"{{temp_owner_name}}\",\n  \"address\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Amman\",\n    \"district\": \"Abdali\",\n    \"country\": \"Jordan\"\n  },\n  \"license_number\": \"{{temp_license_number}}\",\n  \"phoneVerified\": true,\n  \"latitude\": {{temp_latitude}},\n  \"longitude\": {{temp_longitude}}\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "pre-request",
                "script": {
                  "id": "040240a5-16b7-496f-a686-668d1009b447",
                  "type": "text/javascript",
                  "exec": [
                    "// Generate unique provider data",
                    "const timestamp = Date.now();",
                    "const providerData = {",
                    "    email: `provider${timestamp}@test.com`,",
                    "    phone: `+96278${Math.floor(Math.random() * 10000000).toString().padStart(7, '0')}`,",
                    "    password: 'TestProvider123!',",
                    "    businessNameAr: 'ÿµÿßŸÑŸàŸÜ ÿßŸÑÿ™ÿ¨ŸÖŸäŸÑ ÿßŸÑÿ™ÿ¨ÿ±Ÿäÿ®Ÿä',",
                    "    businessNameEn: 'Test Beauty Salon',",
                    "    ownerName: 'Test Provider Owner',",
                    "    licenseNumber: `LIC-${timestamp}`,",
                    "    latitude: 31.9539 + (Math.random() * 0.01),",
                    "    longitude: 35.9106 + (Math.random() * 0.01)",
                    "};",
                    "",
                    "// Store in environment for the request",
                    "pm.environment.set('temp_provider_email', providerData.email);",
                    "pm.environment.set('temp_provider_phone', providerData.phone);",
                    "pm.environment.set('temp_provider_password', providerData.password);",
                    "pm.environment.set('temp_business_name_ar', providerData.businessNameAr);",
                    "pm.environment.set('temp_business_name_en', providerData.businessNameEn);",
                    "pm.environment.set('temp_owner_name', providerData.ownerName);",
                    "pm.environment.set('temp_license_number', providerData.licenseNumber);",
                    "pm.environment.set('temp_latitude', providerData.latitude);",
                    "pm.environment.set('temp_longitude', providerData.longitude);"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "927b2210-7002-4083-95d6-9f631d412773",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Provider created successfully\", function () {",
                    "    if (pm.response.code === 500) {",
                    "        console.error('‚ùå Server error creating provider:', pm.response.json());",
                    "        console.log('Check that the API server is running and database is connected');",
                    "        pm.expect.fail('Server error - is the API running on port 3000?');",
                    "    }",
                    "    ",
                    "    pm.response.to.have.status(201);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.success).to.be.true;",
                    "    pm.expect(response.data).to.have.property('provider');",
                    "    pm.expect(response.data.provider).to.have.property('id');",
                    "    pm.expect(response.data).to.have.property('token');",
                    "    ",
                    "    // Store provider data",
                    "    pm.environment.set('test_provider_id', response.data.provider.id);",
                    "    pm.environment.set('test_provider_token', response.data.token);",
                    "    pm.environment.set('test_provider_email', pm.environment.get('temp_provider_email'));",
                    "    pm.environment.set('test_provider_password', pm.environment.get('temp_provider_password'));",
                    "    ",
                    "    console.log('‚úÖ Created test provider:', response.data.provider.id);",
                    "});"
                  ],
                  "_lastExecutionId": "7ae66907-a5f2-4376-a3e1-56c9fea50bea"
                }
              }
            ]
          },
          {
            "id": "4735665c-b0c8-4421-af62-b8909c7d2310",
            "name": "Create Test Provider 2",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "provider",
                  "signup"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "X-CSRF-Token",
                  "value": "{{csrf_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"{{temp_provider_email}}\",\n  \"password\": \"{{temp_provider_password}}\",\n  \"phone\": \"{{temp_provider_phone}}\",\n  \"business_name_ar\": \"{{temp_business_name_ar}}\",\n  \"business_name_en\": \"{{temp_business_name_en}}\",\n  \"owner_name\": \"{{temp_owner_name}}\",\n  \"address\": {\n    \"street\": \"456 Test Avenue\",\n    \"city\": \"Amman\",\n    \"district\": \"Sweifieh\",\n    \"country\": \"Jordan\"\n  },\n  \"license_number\": \"{{temp_license_number}}\",\n  \"phoneVerified\": true,\n  \"latitude\": {{temp_latitude}},\n  \"longitude\": {{temp_longitude}}\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "pre-request",
                "script": {
                  "id": "2e84d2fa-6949-499c-89c7-2b0cd7761fb5",
                  "type": "text/javascript",
                  "exec": [
                    "// Generate unique provider data",
                    "const timestamp = Date.now();",
                    "const providerData = {",
                    "    email: `provider2_${timestamp}@test.com`,",
                    "    phone: `+96279${Math.floor(Math.random() * 10000000).toString().padStart(7, '0')}`,",
                    "    password: 'TestProvider123!',",
                    "    businessNameAr: 'ŸÖÿ±ŸÉÿ≤ ÿßŸÑÿ™ÿ¨ŸÖŸäŸÑ ÿßŸÑÿ™ÿ¨ÿ±Ÿäÿ®Ÿä',",
                    "    businessNameEn: 'Test Beauty Center',",
                    "    ownerName: 'Test Provider 2 Owner',",
                    "    licenseNumber: `LIC2-${timestamp}`,",
                    "    latitude: 31.9639 + (Math.random() * 0.01),",
                    "    longitude: 35.9206 + (Math.random() * 0.01)",
                    "};",
                    "",
                    "// Store in environment for the request",
                    "pm.environment.set('temp_provider_email', providerData.email);",
                    "pm.environment.set('temp_provider_phone', providerData.phone);",
                    "pm.environment.set('temp_provider_password', providerData.password);",
                    "pm.environment.set('temp_business_name_ar', providerData.businessNameAr);",
                    "pm.environment.set('temp_business_name_en', providerData.businessNameEn);",
                    "pm.environment.set('temp_owner_name', providerData.ownerName);",
                    "pm.environment.set('temp_license_number', providerData.licenseNumber);",
                    "pm.environment.set('temp_latitude', providerData.latitude);",
                    "pm.environment.set('temp_longitude', providerData.longitude);"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "692108d6-0ea2-4a41-9558-42f4ad86160e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Provider 2 created successfully\", function () {",
                    "    pm.response.to.have.status(201);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.success).to.be.true;",
                    "    pm.expect(response.data).to.have.property('provider');",
                    "    pm.expect(response.data.provider).to.have.property('id');",
                    "    pm.expect(response.data).to.have.property('token');",
                    "    ",
                    "    // Store provider 2 data",
                    "    pm.environment.set('test_provider_2_id', response.data.provider.id);",
                    "    pm.environment.set('test_provider_2_token', response.data.token);",
                    "    ",
                    "    console.log('Created test provider 2:', response.data.provider.id);",
                    "});"
                  ],
                  "_lastExecutionId": "9b818a3c-b9c5-47e4-9bcf-579b06d561dc"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "31c74e66-cae2-4756-9353-f5d2243d293c",
        "name": "Test Services",
        "item": [
          {
            "id": "0a0313c6-6152-4e4d-bac4-65c40deeb122",
            "name": "Create Service 1 for Provider 1",
            "request": {
              "url": {
                "path": [
                  "api",
                  "services"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{test_provider_token}}"
                },
                {
                  "key": "X-CSRF-Token",
                  "value": "{{csrf_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name_ar\": \"ŸÇÿµ ÿßŸÑÿ¥ÿπÿ±\",\n  \"name_en\": \"Hair Cut\",\n  \"description_ar\": \"ŸÇÿµ ÿ¥ÿπÿ± ÿßÿ≠ÿ™ÿ±ÿßŸÅŸä ŸÖÿπ ÿ™ÿµŸÅŸäŸÅ\",\n  \"description_en\": \"Professional haircut with styling\",\n  \"category\": \"HAIR\",\n  \"price\": 15.00,\n  \"duration_minutes\": 30\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "245cf06e-a125-4d31-9c01-974bed5193a9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Service 1 created successfully\", function () {",
                    "    pm.response.to.have.status(201);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.success).to.be.true;",
                    "    pm.expect(response.data).to.have.property('id');",
                    "    ",
                    "    // Store service ID",
                    "    pm.environment.set('test_service_id', response.data.id);",
                    "    ",
                    "    console.log('Created test service 1:', response.data.id);",
                    "});"
                  ],
                  "_lastExecutionId": "3b397aaa-edaa-4d3c-915a-7b486f9a6005"
                }
              }
            ]
          },
          {
            "id": "05d72cee-7a88-43eb-bb0d-e8213306a8fa",
            "name": "Create Service 2 for Provider 1",
            "request": {
              "url": {
                "path": [
                  "api",
                  "services"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{test_provider_token}}"
                },
                {
                  "key": "X-CSRF-Token",
                  "value": "{{csrf_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name_ar\": \"ÿµÿ®ÿ∫ÿ© ÿßŸÑÿ¥ÿπÿ±\",\n  \"name_en\": \"Hair Coloring\",\n  \"description_ar\": \"ÿµÿ®ÿ∫ÿ© ÿ¥ÿπÿ± ÿßÿ≠ÿ™ÿ±ÿßŸÅŸäÿ© ÿ®ÿ£ŸÑŸàÿßŸÜ ÿπÿµÿ±Ÿäÿ©\",\n  \"description_en\": \"Professional hair coloring with modern colors\",\n  \"category\": \"HAIR\",\n  \"price\": 45.00,\n  \"duration_minutes\": 120\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f47cd40a-af26-4339-a592-1aa0942386a3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Service 2 created successfully\", function () {",
                    "    pm.response.to.have.status(201);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.success).to.be.true;",
                    "    pm.expect(response.data).to.have.property('id');",
                    "    ",
                    "    // Store service ID",
                    "    pm.environment.set('test_service_2_id', response.data.id);",
                    "    ",
                    "    console.log('Created test service 2:', response.data.id);",
                    "});"
                  ],
                  "_lastExecutionId": "3e268f07-75cb-4684-aa5b-d17e0bb7a8f1"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "10cbbf6b-b742-4667-82aa-204113b01d06",
        "name": "Test Customers",
        "item": [
          {
            "id": "16b176f2-62ea-49ee-9b83-cf22cb84c852",
            "name": "Create Test Customer",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "customer",
                  "signup"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "X-CSRF-Token",
                  "value": "{{csrf_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"{{test_customer_email}}\",\n  \"password\": \"{{test_customer_password}}\",\n  \"phone\": \"{{test_customer_phone}}\",\n  \"name\": \"{{test_customer_name}}\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "pre-request",
                "script": {
                  "id": "3da4e60c-a989-42d5-9b75-7a48ad448afd",
                  "type": "text/javascript",
                  "exec": [
                    "// Generate unique customer data",
                    "const timestamp = Date.now();",
                    "const customerData = {",
                    "    email: `customer${timestamp}@test.com`,",
                    "    phone: `+96279${Math.floor(Math.random() * 10000000).toString().padStart(7, '0')}`,",
                    "    password: 'TestCustomer123!',",
                    "    fullName: 'Test Customer'",
                    "};",
                    "",
                    "// Store in environment",
                    "pm.environment.set('test_customer_email', customerData.email);",
                    "pm.environment.set('test_customer_phone', customerData.phone);",
                    "pm.environment.set('test_customer_password', customerData.password);",
                    "pm.environment.set('test_customer_name', customerData.fullName);"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d493f1f3-5ad4-407c-9e5a-b648e5a5fdb0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Customer created successfully\", function () {",
                    "    pm.response.to.have.status(201);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.success).to.be.true;",
                    "    pm.expect(response.data).to.have.property('user');",
                    "    pm.expect(response.data.user).to.have.property('id');",
                    "    pm.expect(response.data).to.have.property('token');",
                    "    ",
                    "    // Store customer data",
                    "    pm.environment.set('test_customer_id', response.data.user.id);",
                    "    pm.environment.set('customer_token', response.data.token);",
                    "    ",
                    "    console.log('Created test customer:', response.data.user.id);",
                    "});"
                  ],
                  "_lastExecutionId": "d1a8e6eb-e328-4351-936a-0ce436fc3d2e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0248c6c1-1388-42cb-8077-dd18b6ebb950",
        "name": "Summary",
        "item": [
          {
            "id": "4a506ce7-50e6-4ba5-b505-4ba0650be532",
            "name": "Display Test Data Summary",
            "request": {
              "description": {
                "content": "This is just a dummy request to display the test data summary. Check the console for created IDs.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "cc0b07a1-f3e4-46cf-a366-d8ce5dfc66bd",
                  "type": "text/javascript",
                  "exec": [
                    "console.log('\\n===== TEST DATA CREATED SUCCESSFULLY =====\\n');",
                    "console.log('Provider 1 ID:', pm.environment.get('test_provider_id'));",
                    "console.log('Provider 2 ID:', pm.environment.get('test_provider_2_id'));",
                    "console.log('Service 1 ID:', pm.environment.get('test_service_id'));",
                    "console.log('Service 2 ID:', pm.environment.get('test_service_2_id'));",
                    "console.log('Customer ID:', pm.environment.get('test_customer_id'));",
                    "console.log('\\nTokens are stored in environment variables.');",
                    "console.log('\\n========================================\\n');",
                    "",
                    "pm.test(\"All test data created\", function () {",
                    "    pm.expect(pm.environment.get('test_provider_id')).to.not.be.undefined;",
                    "    pm.expect(pm.environment.get('test_service_id')).to.not.be.undefined;",
                    "    pm.expect(pm.environment.get('test_customer_id')).to.not.be.undefined;",
                    "    pm.expect(pm.environment.get('customer_token')).to.not.be.undefined;",
                    "});"
                  ],
                  "_lastExecutionId": "f3c92b91-483b-459f-a846-bb1e139eb6fc"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "a1cf64b6-a949-4003-a765-befc598dc31b",
          "type": "text/javascript",
          "exec": [
            "// Collection-level pre-request script",
            "console.log('Setting up test data for Lamsa API...');"
          ],
          "_lastExecutionId": "d24721e8-7b3d-41e5-856d-88220973864d"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "d3ae0bd5-9592-4a7e-b82b-36abf1bfa0e2",
          "type": "text/javascript",
          "exec": [
            "// Collection-level test script",
            "// Can be used for cleanup or validation"
          ],
          "_lastExecutionId": "822a3d1a-886b-4b84-94cf-680b25f60a05"
        }
      }
    ],
    "variable": [],
    "info": {
      "_postman_id": "lamsa-api-test-data-setup",
      "name": "Lamsa API - Test Data Setup",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Creates test data (providers, services, users) for testing the Lamsa API. Run this collection first to set up all necessary test data.",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2025-02-06T14:00:00.000Z",
      "postman_exported_using": "Postman/10.0.0"
    },
    "id": "local-environment",
    "name": "Lamsa API - Local",
    "values": [
      {
        "description": {
          "content": "Base URL for the API in local development",
          "type": "text/plain"
        },
        "type": "any",
        "value": "http://localhost:3000",
        "key": "base_url"
      },
      {
        "description": {
          "content": "JWT token for customer authentication (generated by Auth requests)",
          "type": "text/plain"
        },
        "type": "any",
        "value": "",
        "key": "customer_token"
      },
      {
        "description": {
          "content": "JWT token for provider authentication (generated by Auth requests)",
          "type": "text/plain"
        },
        "type": "any",
        "value": "",
        "key": "provider_token"
      },
      {
        "description": {
          "content": "JWT token for admin authentication (generated by Auth requests)",
          "type": "text/plain"
        },
        "type": "any",
        "value": "",
        "key": "admin_token"
      },
      {
        "description": {
          "content": "Current environment name",
          "type": "text/plain"
        },
        "type": "any",
        "value": "local",
        "key": "environment_name"
      },
      {
        "description": {
          "content": "Test customer email for signup tests",
          "type": "text/plain"
        },
        "type": "any",
        "value": "test@example.com",
        "key": "test_customer_email"
      },
      {
        "description": {
          "content": "Test customer phone for signup tests",
          "type": "text/plain"
        },
        "type": "any",
        "value": "+962791234567",
        "key": "test_customer_phone"
      },
      {
        "description": {
          "content": "Test provider phone for signup tests",
          "type": "text/plain"
        },
        "type": "any",
        "value": "+962781234567",
        "key": "test_provider_phone"
      },
      {
        "description": {
          "content": "Platform fee for services ‚â§25 JOD",
          "type": "text/plain"
        },
        "type": "any",
        "value": "2.00",
        "key": "platform_fee_small"
      },
      {
        "description": {
          "content": "Platform fee for services >25 JOD",
          "type": "text/plain"
        },
        "type": "any",
        "value": "5.00",
        "key": "platform_fee_large"
      },
      {
        "description": {
          "content": "Database connection URL for local Supabase",
          "type": "text/plain"
        },
        "type": "any",
        "value": "postgresql://postgres:postgres@localhost:54322/lamsa_test",
        "key": "database_url"
      },
      {
        "description": {
          "content": "Local Supabase instance URL",
          "type": "text/plain"
        },
        "type": "any",
        "value": "http://localhost:54321",
        "key": "supabase_url"
      },
      {
        "description": {
          "content": "Supabase anonymous key for local development",
          "type": "text/plain"
        },
        "type": "any",
        "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0",
        "key": "supabase_anon_key"
      },
      {
        "description": {
          "content": "Enable debug logging",
          "type": "text/plain"
        },
        "type": "any",
        "value": "true",
        "key": "debug_mode"
      },
      {
        "description": {
          "content": "Performance threshold for response time in milliseconds",
          "type": "text/plain"
        },
        "type": "any",
        "value": "1000",
        "key": "performance_threshold"
      },
      {
        "description": {
          "content": "Default request timeout in milliseconds",
          "type": "text/plain"
        },
        "type": "any",
        "value": "30000",
        "key": "default_timeout"
      },
      {
        "description": {
          "content": "ID of the primary test provider (set by Test-Data-Setup collection)",
          "type": "text/plain"
        },
        "type": "any",
        "value": "",
        "key": "test_provider_id"
      },
      {
        "description": {
          "content": "ID of the secondary test provider (set by Test-Data-Setup collection)",
          "type": "text/plain"
        },
        "type": "any",
        "value": "",
        "key": "test_provider_2_id"
      },
      {
        "description": {
          "content": "ID of test service 1 (Hair Cut - 15 JOD)",
          "type": "text/plain"
        },
        "type": "any",
        "value": "",
        "key": "test_service_id"
      },
      {
        "description": {
          "content": "ID of test service 2 (Hair Coloring - 45 JOD)",
          "type": "text/plain"
        },
        "type": "any",
        "value": "",
        "key": "test_service_2_id"
      },
      {
        "description": {
          "content": "ID of the test customer (set by Test-Data-Setup collection)",
          "type": "text/plain"
        },
        "type": "any",
        "value": "",
        "key": "test_customer_id"
      },
      {
        "description": {
          "content": "Dynamic booking date (3 days in future)",
          "type": "text/plain"
        },
        "type": "any",
        "value": "",
        "key": "booking_date"
      },
      {
        "description": {
          "content": "Default booking time",
          "type": "text/plain"
        },
        "type": "any",
        "value": "14:00",
        "key": "booking_time"
      },
      {
        "description": {
          "content": "CSRF token for API requests",
          "type": "text/plain"
        },
        "type": "any",
        "value": "",
        "key": "csrf_token"
      }
    ]
  },
  "globals": {
    "id": "ab4c0b1e-6f13-44a0-ae4c-9c0f9be88101",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 25,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 8,
        "pending": 0,
        "failed": 8
      },
      "tests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 9,
        "pending": 0,
        "failed": 8
      },
      "testScripts": {
        "total": 16,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 9,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1754745202642,
      "completed": 1754745207180
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 8,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a9072553-ebb6-40f2-aed0-f0e3ca2f7721",
          "httpRequestId": "55c58914-8240-4076-83d8-b89b0645dfbc"
        },
        "item": {
          "id": "2b7ba948-7665-4d59-9285-34d336c4c3d0",
          "name": "Health Check",
          "request": {
            "description": {
              "content": "Verifies the API server is running and database is connected before creating test data.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e050ae7b-ac62-4a04-9bf6-24227fb2a766",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"API server is healthy\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.status).to.equal('healthy');",
                  "    ",
                  "    console.log('‚úÖ API server is running and healthy');",
                  "});",
                  "",
                  "pm.test(\"Database connection is active\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.database.status).to.equal('connected');",
                  "    ",
                  "    console.log('‚úÖ Database connection confirmed');",
                  "});"
                ],
                "_lastExecutionId": "b702ab52-0351-482c-bacd-a019f5102b8b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "75958526-7f65-40d0-8ad8-56d7139eb9de",
                "type": "text/javascript",
                "exec": [
                  "console.log('üè• Checking API server health...');"
                ],
                "_lastExecutionId": "739123cc-3546-4823-aaa2-9bf7b2ef081d"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Verifies the API server is running and database is connected before creating test data.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "560fea26-632c-4a32-9f4f-cea5f139ffed",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "2b7ba948-7665-4d59-9285-34d336c4c3d0",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "API server is healthy",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "API server is healthy",
              "message": "expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Database connection is active",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Database connection is active",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d07e55ef-1f3f-40fa-8af4-b45fd425005a",
          "length": 8,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0b661a41-014e-4680-a8fb-4c8b95e7e4d4"
        },
        "item": {
          "id": "c546d815-b3f1-459e-ba88-c8e5e3c47986",
          "name": "Get CSRF Token",
          "request": {
            "url": {
              "path": [
                "api",
                "csrf-token"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a2f4a4a2-b920-4e00-b931-941391bd6814",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"CSRF token retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const token = pm.response.json().csrfToken;",
                  "    pm.expect(token).to.be.a('string');",
                  "    pm.environment.set(\"csrf_token\", token);",
                  "});"
                ],
                "_lastExecutionId": "031f890b-2740-4836-ba3e-8771f0c7235e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "csrf-token"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3d999170-2a70-4514-8c83-e852484ba634",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "c546d815-b3f1-459e-ba88-c8e5e3c47986",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "CSRF token retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "CSRF token retrieved",
              "message": "expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "1c7dbb81-841a-4fba-97c3-d57aae9e25c9",
          "length": 8,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "05d9c468-2a9f-4b1d-9096-275aa99dab88"
        },
        "item": {
          "id": "87b466e4-a4d1-4eeb-be8b-dfecc6173763",
          "name": "Create Test Provider 1",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "provider",
                "signup"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "X-CSRF-Token",
                "value": "{{csrf_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{temp_provider_email}}\",\n  \"password\": \"{{temp_provider_password}}\",\n  \"phone\": \"{{temp_provider_phone}}\",\n  \"business_name_ar\": \"{{temp_business_name_ar}}\",\n  \"business_name_en\": \"{{temp_business_name_en}}\",\n  \"owner_name\": \"{{temp_owner_name}}\",\n  \"address\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Amman\",\n    \"district\": \"Abdali\",\n    \"country\": \"Jordan\"\n  },\n  \"license_number\": \"{{temp_license_number}}\",\n  \"phoneVerified\": true,\n  \"latitude\": {{temp_latitude}},\n  \"longitude\": {{temp_longitude}}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "pre-request",
              "script": {
                "id": "040240a5-16b7-496f-a686-668d1009b447",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique provider data",
                  "const timestamp = Date.now();",
                  "const providerData = {",
                  "    email: `provider${timestamp}@test.com`,",
                  "    phone: `+96278${Math.floor(Math.random() * 10000000).toString().padStart(7, '0')}`,",
                  "    password: 'TestProvider123!',",
                  "    businessNameAr: 'ÿµÿßŸÑŸàŸÜ ÿßŸÑÿ™ÿ¨ŸÖŸäŸÑ ÿßŸÑÿ™ÿ¨ÿ±Ÿäÿ®Ÿä',",
                  "    businessNameEn: 'Test Beauty Salon',",
                  "    ownerName: 'Test Provider Owner',",
                  "    licenseNumber: `LIC-${timestamp}`,",
                  "    latitude: 31.9539 + (Math.random() * 0.01),",
                  "    longitude: 35.9106 + (Math.random() * 0.01)",
                  "};",
                  "",
                  "// Store in environment for the request",
                  "pm.environment.set('temp_provider_email', providerData.email);",
                  "pm.environment.set('temp_provider_phone', providerData.phone);",
                  "pm.environment.set('temp_provider_password', providerData.password);",
                  "pm.environment.set('temp_business_name_ar', providerData.businessNameAr);",
                  "pm.environment.set('temp_business_name_en', providerData.businessNameEn);",
                  "pm.environment.set('temp_owner_name', providerData.ownerName);",
                  "pm.environment.set('temp_license_number', providerData.licenseNumber);",
                  "pm.environment.set('temp_latitude', providerData.latitude);",
                  "pm.environment.set('temp_longitude', providerData.longitude);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "927b2210-7002-4083-95d6-9f631d412773",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Provider created successfully\", function () {",
                  "    if (pm.response.code === 500) {",
                  "        console.error('‚ùå Server error creating provider:', pm.response.json());",
                  "        console.log('Check that the API server is running and database is connected');",
                  "        pm.expect.fail('Server error - is the API running on port 3000?');",
                  "    }",
                  "    ",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data).to.have.property('provider');",
                  "    pm.expect(response.data.provider).to.have.property('id');",
                  "    pm.expect(response.data).to.have.property('token');",
                  "    ",
                  "    // Store provider data",
                  "    pm.environment.set('test_provider_id', response.data.provider.id);",
                  "    pm.environment.set('test_provider_token', response.data.token);",
                  "    pm.environment.set('test_provider_email', pm.environment.get('temp_provider_email'));",
                  "    pm.environment.set('test_provider_password', pm.environment.get('temp_provider_password'));",
                  "    ",
                  "    console.log('‚úÖ Created test provider:', response.data.provider.id);",
                  "});"
                ],
                "_lastExecutionId": "7ae66907-a5f2-4376-a3e1-56c9fea50bea"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "auth",
              "provider",
              "signup"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-CSRF-Token",
              "value": ""
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2cf69fbd-99b3-488f-a61f-9dc6e52cce9b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"{{temp_provider_email}}\",\n  \"password\": \"{{temp_provider_password}}\",\n  \"phone\": \"{{temp_provider_phone}}\",\n  \"business_name_ar\": \"{{temp_business_name_ar}}\",\n  \"business_name_en\": \"{{temp_business_name_en}}\",\n  \"owner_name\": \"{{temp_owner_name}}\",\n  \"address\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Amman\",\n    \"district\": \"Abdali\",\n    \"country\": \"Jordan\"\n  },\n  \"license_number\": \"{{temp_license_number}}\",\n  \"phoneVerified\": true,\n  \"latitude\": {{temp_latitude}},\n  \"longitude\": {{temp_longitude}}\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "87b466e4-a4d1-4eeb-be8b-dfecc6173763",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Provider created successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Provider created successfully",
              "message": "expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6f8bf78a-f66c-4696-ac8d-1d498f908690",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2b7d0794-31c9-42c3-bacb-67f82993397b"
        },
        "item": {
          "id": "4735665c-b0c8-4421-af62-b8909c7d2310",
          "name": "Create Test Provider 2",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "provider",
                "signup"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "X-CSRF-Token",
                "value": "{{csrf_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{temp_provider_email}}\",\n  \"password\": \"{{temp_provider_password}}\",\n  \"phone\": \"{{temp_provider_phone}}\",\n  \"business_name_ar\": \"{{temp_business_name_ar}}\",\n  \"business_name_en\": \"{{temp_business_name_en}}\",\n  \"owner_name\": \"{{temp_owner_name}}\",\n  \"address\": {\n    \"street\": \"456 Test Avenue\",\n    \"city\": \"Amman\",\n    \"district\": \"Sweifieh\",\n    \"country\": \"Jordan\"\n  },\n  \"license_number\": \"{{temp_license_number}}\",\n  \"phoneVerified\": true,\n  \"latitude\": {{temp_latitude}},\n  \"longitude\": {{temp_longitude}}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "pre-request",
              "script": {
                "id": "2e84d2fa-6949-499c-89c7-2b0cd7761fb5",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique provider data",
                  "const timestamp = Date.now();",
                  "const providerData = {",
                  "    email: `provider2_${timestamp}@test.com`,",
                  "    phone: `+96279${Math.floor(Math.random() * 10000000).toString().padStart(7, '0')}`,",
                  "    password: 'TestProvider123!',",
                  "    businessNameAr: 'ŸÖÿ±ŸÉÿ≤ ÿßŸÑÿ™ÿ¨ŸÖŸäŸÑ ÿßŸÑÿ™ÿ¨ÿ±Ÿäÿ®Ÿä',",
                  "    businessNameEn: 'Test Beauty Center',",
                  "    ownerName: 'Test Provider 2 Owner',",
                  "    licenseNumber: `LIC2-${timestamp}`,",
                  "    latitude: 31.9639 + (Math.random() * 0.01),",
                  "    longitude: 35.9206 + (Math.random() * 0.01)",
                  "};",
                  "",
                  "// Store in environment for the request",
                  "pm.environment.set('temp_provider_email', providerData.email);",
                  "pm.environment.set('temp_provider_phone', providerData.phone);",
                  "pm.environment.set('temp_provider_password', providerData.password);",
                  "pm.environment.set('temp_business_name_ar', providerData.businessNameAr);",
                  "pm.environment.set('temp_business_name_en', providerData.businessNameEn);",
                  "pm.environment.set('temp_owner_name', providerData.ownerName);",
                  "pm.environment.set('temp_license_number', providerData.licenseNumber);",
                  "pm.environment.set('temp_latitude', providerData.latitude);",
                  "pm.environment.set('temp_longitude', providerData.longitude);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "692108d6-0ea2-4a41-9558-42f4ad86160e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Provider 2 created successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data).to.have.property('provider');",
                  "    pm.expect(response.data.provider).to.have.property('id');",
                  "    pm.expect(response.data).to.have.property('token');",
                  "    ",
                  "    // Store provider 2 data",
                  "    pm.environment.set('test_provider_2_id', response.data.provider.id);",
                  "    pm.environment.set('test_provider_2_token', response.data.token);",
                  "    ",
                  "    console.log('Created test provider 2:', response.data.provider.id);",
                  "});"
                ],
                "_lastExecutionId": "9b818a3c-b9c5-47e4-9bcf-579b06d561dc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "auth",
              "provider",
              "signup"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-CSRF-Token",
              "value": ""
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ae0cd77f-a1e7-4621-8789-74e26cc38695",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"{{temp_provider_email}}\",\n  \"password\": \"{{temp_provider_password}}\",\n  \"phone\": \"{{temp_provider_phone}}\",\n  \"business_name_ar\": \"{{temp_business_name_ar}}\",\n  \"business_name_en\": \"{{temp_business_name_en}}\",\n  \"owner_name\": \"{{temp_owner_name}}\",\n  \"address\": {\n    \"street\": \"456 Test Avenue\",\n    \"city\": \"Amman\",\n    \"district\": \"Sweifieh\",\n    \"country\": \"Jordan\"\n  },\n  \"license_number\": \"{{temp_license_number}}\",\n  \"phoneVerified\": true,\n  \"latitude\": {{temp_latitude}},\n  \"longitude\": {{temp_longitude}}\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "4735665c-b0c8-4421-af62-b8909c7d2310",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Provider 2 created successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Provider 2 created successfully",
              "message": "expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "db122c62-f4cf-4c76-aa5e-0d84cc4beca2",
          "length": 8,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5f4c658f-1303-4580-9ff5-66d66ffd9532"
        },
        "item": {
          "id": "0a0313c6-6152-4e4d-bac4-65c40deeb122",
          "name": "Create Service 1 for Provider 1",
          "request": {
            "url": {
              "path": [
                "api",
                "services"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_provider_token}}"
              },
              {
                "key": "X-CSRF-Token",
                "value": "{{csrf_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name_ar\": \"ŸÇÿµ ÿßŸÑÿ¥ÿπÿ±\",\n  \"name_en\": \"Hair Cut\",\n  \"description_ar\": \"ŸÇÿµ ÿ¥ÿπÿ± ÿßÿ≠ÿ™ÿ±ÿßŸÅŸä ŸÖÿπ ÿ™ÿµŸÅŸäŸÅ\",\n  \"description_en\": \"Professional haircut with styling\",\n  \"category\": \"HAIR\",\n  \"price\": 15.00,\n  \"duration_minutes\": 30\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "245cf06e-a125-4d31-9c01-974bed5193a9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Service 1 created successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    ",
                  "    // Store service ID",
                  "    pm.environment.set('test_service_id', response.data.id);",
                  "    ",
                  "    console.log('Created test service 1:', response.data.id);",
                  "});"
                ],
                "_lastExecutionId": "3b397aaa-edaa-4d3c-915a-7b486f9a6005"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "services"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{test_provider_token}}"
            },
            {
              "key": "X-CSRF-Token",
              "value": ""
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bb18ef73-c664-4b3c-8e56-bcbc2bae595b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name_ar\": \"ŸÇÿµ ÿßŸÑÿ¥ÿπÿ±\",\n  \"name_en\": \"Hair Cut\",\n  \"description_ar\": \"ŸÇÿµ ÿ¥ÿπÿ± ÿßÿ≠ÿ™ÿ±ÿßŸÅŸä ŸÖÿπ ÿ™ÿµŸÅŸäŸÅ\",\n  \"description_en\": \"Professional haircut with styling\",\n  \"category\": \"HAIR\",\n  \"price\": 15.00,\n  \"duration_minutes\": 30\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "0a0313c6-6152-4e4d-bac4-65c40deeb122",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Service 1 created successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Service 1 created successfully",
              "message": "expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "521b030c-e170-4881-8256-739de4a4d1e7",
          "length": 8,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7048edab-b474-4ecd-99b7-8ffab3487cc5"
        },
        "item": {
          "id": "05d72cee-7a88-43eb-bb0d-e8213306a8fa",
          "name": "Create Service 2 for Provider 1",
          "request": {
            "url": {
              "path": [
                "api",
                "services"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_provider_token}}"
              },
              {
                "key": "X-CSRF-Token",
                "value": "{{csrf_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name_ar\": \"ÿµÿ®ÿ∫ÿ© ÿßŸÑÿ¥ÿπÿ±\",\n  \"name_en\": \"Hair Coloring\",\n  \"description_ar\": \"ÿµÿ®ÿ∫ÿ© ÿ¥ÿπÿ± ÿßÿ≠ÿ™ÿ±ÿßŸÅŸäÿ© ÿ®ÿ£ŸÑŸàÿßŸÜ ÿπÿµÿ±Ÿäÿ©\",\n  \"description_en\": \"Professional hair coloring with modern colors\",\n  \"category\": \"HAIR\",\n  \"price\": 45.00,\n  \"duration_minutes\": 120\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f47cd40a-af26-4339-a592-1aa0942386a3",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Service 2 created successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    ",
                  "    // Store service ID",
                  "    pm.environment.set('test_service_2_id', response.data.id);",
                  "    ",
                  "    console.log('Created test service 2:', response.data.id);",
                  "});"
                ],
                "_lastExecutionId": "3e268f07-75cb-4684-aa5b-d17e0bb7a8f1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "services"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{test_provider_token}}"
            },
            {
              "key": "X-CSRF-Token",
              "value": ""
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "433680eb-5b88-4a52-bd6b-3e7e48f099c9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name_ar\": \"ÿµÿ®ÿ∫ÿ© ÿßŸÑÿ¥ÿπÿ±\",\n  \"name_en\": \"Hair Coloring\",\n  \"description_ar\": \"ÿµÿ®ÿ∫ÿ© ÿ¥ÿπÿ± ÿßÿ≠ÿ™ÿ±ÿßŸÅŸäÿ© ÿ®ÿ£ŸÑŸàÿßŸÜ ÿπÿµÿ±Ÿäÿ©\",\n  \"description_en\": \"Professional hair coloring with modern colors\",\n  \"category\": \"HAIR\",\n  \"price\": 45.00,\n  \"duration_minutes\": 120\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "05d72cee-7a88-43eb-bb0d-e8213306a8fa",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Service 2 created successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Service 2 created successfully",
              "message": "expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "aefd1c96-2333-4108-ad0a-9acf6d9811a7",
          "length": 8,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "78a93906-7626-49cb-ad5a-a46b91e8a2ac"
        },
        "item": {
          "id": "16b176f2-62ea-49ee-9b83-cf22cb84c852",
          "name": "Create Test Customer",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "customer",
                "signup"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "X-CSRF-Token",
                "value": "{{csrf_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_customer_email}}\",\n  \"password\": \"{{test_customer_password}}\",\n  \"phone\": \"{{test_customer_phone}}\",\n  \"name\": \"{{test_customer_name}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "pre-request",
              "script": {
                "id": "3da4e60c-a989-42d5-9b75-7a48ad448afd",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique customer data",
                  "const timestamp = Date.now();",
                  "const customerData = {",
                  "    email: `customer${timestamp}@test.com`,",
                  "    phone: `+96279${Math.floor(Math.random() * 10000000).toString().padStart(7, '0')}`,",
                  "    password: 'TestCustomer123!',",
                  "    fullName: 'Test Customer'",
                  "};",
                  "",
                  "// Store in environment",
                  "pm.environment.set('test_customer_email', customerData.email);",
                  "pm.environment.set('test_customer_phone', customerData.phone);",
                  "pm.environment.set('test_customer_password', customerData.password);",
                  "pm.environment.set('test_customer_name', customerData.fullName);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d493f1f3-5ad4-407c-9e5a-b648e5a5fdb0",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Customer created successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data).to.have.property('user');",
                  "    pm.expect(response.data.user).to.have.property('id');",
                  "    pm.expect(response.data).to.have.property('token');",
                  "    ",
                  "    // Store customer data",
                  "    pm.environment.set('test_customer_id', response.data.user.id);",
                  "    pm.environment.set('customer_token', response.data.token);",
                  "    ",
                  "    console.log('Created test customer:', response.data.user.id);",
                  "});"
                ],
                "_lastExecutionId": "d1a8e6eb-e328-4351-936a-0ce436fc3d2e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "auth",
              "customer",
              "signup"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "X-CSRF-Token",
              "value": ""
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "75195269-6aee-46f5-a07c-466d047bf30c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"{{test_customer_password}}\",\n  \"phone\": \"+962791234567\",\n  \"name\": \"{{test_customer_name}}\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "16b176f2-62ea-49ee-9b83-cf22cb84c852",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Customer created successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Customer created successfully",
              "message": "expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3837129c-ae17-415d-a666-a7f3170a09b7",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6f27ab56-6563-4bce-a411-9adbded17b25"
        },
        "item": {
          "id": "4a506ce7-50e6-4ba5-b505-4ba0650be532",
          "name": "Display Test Data Summary",
          "request": {
            "description": {
              "content": "This is just a dummy request to display the test data summary. Check the console for created IDs.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cc0b07a1-f3e4-46cf-a366-d8ce5dfc66bd",
                "type": "text/javascript",
                "exec": [
                  "console.log('\\n===== TEST DATA CREATED SUCCESSFULLY =====\\n');",
                  "console.log('Provider 1 ID:', pm.environment.get('test_provider_id'));",
                  "console.log('Provider 2 ID:', pm.environment.get('test_provider_2_id'));",
                  "console.log('Service 1 ID:', pm.environment.get('test_service_id'));",
                  "console.log('Service 2 ID:', pm.environment.get('test_service_2_id'));",
                  "console.log('Customer ID:', pm.environment.get('test_customer_id'));",
                  "console.log('\\nTokens are stored in environment variables.');",
                  "console.log('\\n========================================\\n');",
                  "",
                  "pm.test(\"All test data created\", function () {",
                  "    pm.expect(pm.environment.get('test_provider_id')).to.not.be.undefined;",
                  "    pm.expect(pm.environment.get('test_service_id')).to.not.be.undefined;",
                  "    pm.expect(pm.environment.get('test_customer_id')).to.not.be.undefined;",
                  "    pm.expect(pm.environment.get('customer_token')).to.not.be.undefined;",
                  "});"
                ],
                "_lastExecutionId": "f3c92b91-483b-459f-a846-bb1e139eb6fc"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This is just a dummy request to display the test data summary. Check the console for created IDs.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8d07dfdc-9b8c-492b-a665-b29325ec4791",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "4a506ce7-50e6-4ba5-b505-4ba0650be532",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "All test data created",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 0
    },
    "failures": [
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1611:16)",
          "checksum": "766c5ac08b93aee30d0f2d760d8b05cb",
          "id": "8619bb7c-22a7-4bcb-836b-5f7e36c8fb4b",
          "timestamp": 1754745203249,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1611,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "2b7ba948-7665-4d59-9285-34d336c4c3d0",
          "name": "Health Check",
          "request": {
            "description": {
              "content": "Verifies the API server is running and database is connected before creating test data.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "api",
                "health"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "560fea26-632c-4a32-9f4f-cea5f139ffed",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e050ae7b-ac62-4a04-9bf6-24227fb2a766",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"API server is healthy\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.status).to.equal('healthy');",
                  "    ",
                  "    console.log('‚úÖ API server is running and healthy');",
                  "});",
                  "",
                  "pm.test(\"Database connection is active\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.database.status).to.equal('connected');",
                  "    ",
                  "    console.log('‚úÖ Database connection confirmed');",
                  "});"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "75958526-7f65-40d0-8ad8-56d7139eb9de",
                "type": "text/javascript",
                "exec": [
                  "console.log('üè• Checking API server health...');"
                ]
              }
            }
          ]
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 8,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a9072553-ebb6-40f2-aed0-f0e3ca2f7721",
          "httpRequestId": "55c58914-8240-4076-83d8-b89b0645dfbc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "API server is healthy",
          "message": "expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "292ac9ed9684b276352526297c37ca4e",
          "id": "fcef17c4-d4e5-4ca2-9679-be988a676333",
          "timestamp": 1754745203283,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2b7ba948-7665-4d59-9285-34d336c4c3d0",
          "name": "Health Check",
          "request": {
            "description": {
              "content": "Verifies the API server is running and database is connected before creating test data.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e050ae7b-ac62-4a04-9bf6-24227fb2a766",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"API server is healthy\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.status).to.equal('healthy');",
                  "    ",
                  "    console.log('‚úÖ API server is running and healthy');",
                  "});",
                  "",
                  "pm.test(\"Database connection is active\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.database.status).to.equal('connected');",
                  "    ",
                  "    console.log('‚úÖ Database connection confirmed');",
                  "});"
                ],
                "_lastExecutionId": "b702ab52-0351-482c-bacd-a019f5102b8b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "75958526-7f65-40d0-8ad8-56d7139eb9de",
                "type": "text/javascript",
                "exec": [
                  "console.log('üè• Checking API server health...');"
                ],
                "_lastExecutionId": "739123cc-3546-4823-aaa2-9bf7b2ef081d"
              }
            }
          ]
        },
        "parent": {
          "id": "38c0ec97-f3c5-481c-bc24-577545f45506",
          "name": "Pre-flight Checks",
          "item": [
            {
              "id": "2b7ba948-7665-4d59-9285-34d336c4c3d0",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Verifies the API server is running and database is connected before creating test data.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e050ae7b-ac62-4a04-9bf6-24227fb2a766",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"API server is healthy\", function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "    pm.expect(response.data.status).to.equal('healthy');",
                      "    ",
                      "    console.log('‚úÖ API server is running and healthy');",
                      "});",
                      "",
                      "pm.test(\"Database connection is active\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data.database.status).to.equal('connected');",
                      "    ",
                      "    console.log('‚úÖ Database connection confirmed');",
                      "});"
                    ],
                    "_lastExecutionId": "b702ab52-0351-482c-bacd-a019f5102b8b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "75958526-7f65-40d0-8ad8-56d7139eb9de",
                    "type": "text/javascript",
                    "exec": [
                      "console.log('üè• Checking API server health...');"
                    ],
                    "_lastExecutionId": "739123cc-3546-4823-aaa2-9bf7b2ef081d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 8,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a9072553-ebb6-40f2-aed0-f0e3ca2f7721",
          "httpRequestId": "55c58914-8240-4076-83d8-b89b0645dfbc",
          "scriptId": "e050ae7b-ac62-4a04-9bf6-24227fb2a766",
          "execution": "b702ab52-0351-482c-bacd-a019f5102b8b"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Database connection is active",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "bfd36c648ec82569416a9df162a8f046",
          "id": "471ebb0b-bffc-4235-9074-4ac993457e79",
          "timestamp": 1754745203285,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "2b7ba948-7665-4d59-9285-34d336c4c3d0",
          "name": "Health Check",
          "request": {
            "description": {
              "content": "Verifies the API server is running and database is connected before creating test data.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e050ae7b-ac62-4a04-9bf6-24227fb2a766",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"API server is healthy\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.status).to.equal('healthy');",
                  "    ",
                  "    console.log('‚úÖ API server is running and healthy');",
                  "});",
                  "",
                  "pm.test(\"Database connection is active\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.database.status).to.equal('connected');",
                  "    ",
                  "    console.log('‚úÖ Database connection confirmed');",
                  "});"
                ],
                "_lastExecutionId": "b702ab52-0351-482c-bacd-a019f5102b8b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "75958526-7f65-40d0-8ad8-56d7139eb9de",
                "type": "text/javascript",
                "exec": [
                  "console.log('üè• Checking API server health...');"
                ],
                "_lastExecutionId": "739123cc-3546-4823-aaa2-9bf7b2ef081d"
              }
            }
          ]
        },
        "parent": {
          "id": "38c0ec97-f3c5-481c-bc24-577545f45506",
          "name": "Pre-flight Checks",
          "item": [
            {
              "id": "2b7ba948-7665-4d59-9285-34d336c4c3d0",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Verifies the API server is running and database is connected before creating test data.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e050ae7b-ac62-4a04-9bf6-24227fb2a766",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"API server is healthy\", function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "    pm.expect(response.data.status).to.equal('healthy');",
                      "    ",
                      "    console.log('‚úÖ API server is running and healthy');",
                      "});",
                      "",
                      "pm.test(\"Database connection is active\", function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data.database.status).to.equal('connected');",
                      "    ",
                      "    console.log('‚úÖ Database connection confirmed');",
                      "});"
                    ],
                    "_lastExecutionId": "b702ab52-0351-482c-bacd-a019f5102b8b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "75958526-7f65-40d0-8ad8-56d7139eb9de",
                    "type": "text/javascript",
                    "exec": [
                      "console.log('üè• Checking API server health...');"
                    ],
                    "_lastExecutionId": "739123cc-3546-4823-aaa2-9bf7b2ef081d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 8,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a9072553-ebb6-40f2-aed0-f0e3ca2f7721",
          "httpRequestId": "55c58914-8240-4076-83d8-b89b0645dfbc",
          "scriptId": "e050ae7b-ac62-4a04-9bf6-24227fb2a766",
          "execution": "b702ab52-0351-482c-bacd-a019f5102b8b"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1611:16)",
          "checksum": "766c5ac08b93aee30d0f2d760d8b05cb",
          "id": "6467aae2-846a-488b-a1b6-6aff50e45fab",
          "timestamp": 1754745203835,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1611,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "c546d815-b3f1-459e-ba88-c8e5e3c47986",
          "name": "Get CSRF Token",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "api",
                "csrf-token"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "3d999170-2a70-4514-8c83-e852484ba634",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a2f4a4a2-b920-4e00-b931-941391bd6814",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"CSRF token retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const token = pm.response.json().csrfToken;",
                  "    pm.expect(token).to.be.a('string');",
                  "    pm.environment.set(\"csrf_token\", token);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "d07e55ef-1f3f-40fa-8af4-b45fd425005a",
          "length": 8,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0b661a41-014e-4680-a8fb-4c8b95e7e4d4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "CSRF token retrieved",
          "message": "expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "b93900692e7030380451d6f1a4ba74f9",
          "id": "a6868cb6-9305-47de-9f3a-dd1735f6c7cf",
          "timestamp": 1754745203874,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c546d815-b3f1-459e-ba88-c8e5e3c47986",
          "name": "Get CSRF Token",
          "request": {
            "url": {
              "path": [
                "api",
                "csrf-token"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a2f4a4a2-b920-4e00-b931-941391bd6814",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"CSRF token retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const token = pm.response.json().csrfToken;",
                  "    pm.expect(token).to.be.a('string');",
                  "    pm.environment.set(\"csrf_token\", token);",
                  "});"
                ],
                "_lastExecutionId": "031f890b-2740-4836-ba3e-8771f0c7235e"
              }
            }
          ]
        },
        "parent": {
          "id": "723b6426-54db-468b-b1f9-9f728c4ddfe8",
          "name": "Authentication Setup",
          "item": [
            {
              "id": "c546d815-b3f1-459e-ba88-c8e5e3c47986",
              "name": "Get CSRF Token",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "csrf-token"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a2f4a4a2-b920-4e00-b931-941391bd6814",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"CSRF token retrieved\", function () {",
                      "    pm.response.to.have.status(200);",
                      "    const token = pm.response.json().csrfToken;",
                      "    pm.expect(token).to.be.a('string');",
                      "    pm.environment.set(\"csrf_token\", token);",
                      "});"
                    ],
                    "_lastExecutionId": "031f890b-2740-4836-ba3e-8771f0c7235e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d07e55ef-1f3f-40fa-8af4-b45fd425005a",
          "length": 8,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0b661a41-014e-4680-a8fb-4c8b95e7e4d4",
          "scriptId": "a2f4a4a2-b920-4e00-b931-941391bd6814",
          "execution": "031f890b-2740-4836-ba3e-8771f0c7235e"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1611:16)",
          "checksum": "766c5ac08b93aee30d0f2d760d8b05cb",
          "id": "7b18c014-d516-4e51-8b78-fc424c0be90c",
          "timestamp": 1754745204397,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1611,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "87b466e4-a4d1-4eeb-be8b-dfecc6173763",
          "name": "Create Test Provider 1",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "api",
                "auth",
                "provider",
                "signup"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "X-CSRF-Token",
                "value": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "2cf69fbd-99b3-488f-a61f-9dc6e52cce9b",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{temp_provider_email}}\",\n  \"password\": \"{{temp_provider_password}}\",\n  \"phone\": \"{{temp_provider_phone}}\",\n  \"business_name_ar\": \"{{temp_business_name_ar}}\",\n  \"business_name_en\": \"{{temp_business_name_en}}\",\n  \"owner_name\": \"{{temp_owner_name}}\",\n  \"address\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Amman\",\n    \"district\": \"Abdali\",\n    \"country\": \"Jordan\"\n  },\n  \"license_number\": \"{{temp_license_number}}\",\n  \"phoneVerified\": true,\n  \"latitude\": {{temp_latitude}},\n  \"longitude\": {{temp_longitude}}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "pre-request",
              "script": {
                "id": "040240a5-16b7-496f-a686-668d1009b447",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique provider data",
                  "const timestamp = Date.now();",
                  "const providerData = {",
                  "    email: `provider${timestamp}@test.com`,",
                  "    phone: `+96278${Math.floor(Math.random() * 10000000).toString().padStart(7, '0')}`,",
                  "    password: 'TestProvider123!',",
                  "    businessNameAr: 'ÿµÿßŸÑŸàŸÜ ÿßŸÑÿ™ÿ¨ŸÖŸäŸÑ ÿßŸÑÿ™ÿ¨ÿ±Ÿäÿ®Ÿä',",
                  "    businessNameEn: 'Test Beauty Salon',",
                  "    ownerName: 'Test Provider Owner',",
                  "    licenseNumber: `LIC-${timestamp}`,",
                  "    latitude: 31.9539 + (Math.random() * 0.01),",
                  "    longitude: 35.9106 + (Math.random() * 0.01)",
                  "};",
                  "",
                  "// Store in environment for the request",
                  "pm.environment.set('temp_provider_email', providerData.email);",
                  "pm.environment.set('temp_provider_phone', providerData.phone);",
                  "pm.environment.set('temp_provider_password', providerData.password);",
                  "pm.environment.set('temp_business_name_ar', providerData.businessNameAr);",
                  "pm.environment.set('temp_business_name_en', providerData.businessNameEn);",
                  "pm.environment.set('temp_owner_name', providerData.ownerName);",
                  "pm.environment.set('temp_license_number', providerData.licenseNumber);",
                  "pm.environment.set('temp_latitude', providerData.latitude);",
                  "pm.environment.set('temp_longitude', providerData.longitude);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "927b2210-7002-4083-95d6-9f631d412773",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Provider created successfully\", function () {",
                  "    if (pm.response.code === 500) {",
                  "        console.error('‚ùå Server error creating provider:', pm.response.json());",
                  "        console.log('Check that the API server is running and database is connected');",
                  "        pm.expect.fail('Server error - is the API running on port 3000?');",
                  "    }",
                  "    ",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data).to.have.property('provider');",
                  "    pm.expect(response.data.provider).to.have.property('id');",
                  "    pm.expect(response.data).to.have.property('token');",
                  "    ",
                  "    // Store provider data",
                  "    pm.environment.set('test_provider_id', response.data.provider.id);",
                  "    pm.environment.set('test_provider_token', response.data.token);",
                  "    pm.environment.set('test_provider_email', pm.environment.get('temp_provider_email'));",
                  "    pm.environment.set('test_provider_password', pm.environment.get('temp_provider_password'));",
                  "    ",
                  "    console.log('‚úÖ Created test provider:', response.data.provider.id);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "1c7dbb81-841a-4fba-97c3-d57aae9e25c9",
          "length": 8,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "05d9c468-2a9f-4b1d-9096-275aa99dab88"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Provider created successfully",
          "message": "expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "9b7d8de09988fc76b4c1fcdf9095b583",
          "id": "6116076c-983b-46fc-8428-e87cdefd1a8f",
          "timestamp": 1754745204408,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "87b466e4-a4d1-4eeb-be8b-dfecc6173763",
          "name": "Create Test Provider 1",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "provider",
                "signup"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "X-CSRF-Token",
                "value": "{{csrf_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{temp_provider_email}}\",\n  \"password\": \"{{temp_provider_password}}\",\n  \"phone\": \"{{temp_provider_phone}}\",\n  \"business_name_ar\": \"{{temp_business_name_ar}}\",\n  \"business_name_en\": \"{{temp_business_name_en}}\",\n  \"owner_name\": \"{{temp_owner_name}}\",\n  \"address\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Amman\",\n    \"district\": \"Abdali\",\n    \"country\": \"Jordan\"\n  },\n  \"license_number\": \"{{temp_license_number}}\",\n  \"phoneVerified\": true,\n  \"latitude\": {{temp_latitude}},\n  \"longitude\": {{temp_longitude}}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "pre-request",
              "script": {
                "id": "040240a5-16b7-496f-a686-668d1009b447",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique provider data",
                  "const timestamp = Date.now();",
                  "const providerData = {",
                  "    email: `provider${timestamp}@test.com`,",
                  "    phone: `+96278${Math.floor(Math.random() * 10000000).toString().padStart(7, '0')}`,",
                  "    password: 'TestProvider123!',",
                  "    businessNameAr: 'ÿµÿßŸÑŸàŸÜ ÿßŸÑÿ™ÿ¨ŸÖŸäŸÑ ÿßŸÑÿ™ÿ¨ÿ±Ÿäÿ®Ÿä',",
                  "    businessNameEn: 'Test Beauty Salon',",
                  "    ownerName: 'Test Provider Owner',",
                  "    licenseNumber: `LIC-${timestamp}`,",
                  "    latitude: 31.9539 + (Math.random() * 0.01),",
                  "    longitude: 35.9106 + (Math.random() * 0.01)",
                  "};",
                  "",
                  "// Store in environment for the request",
                  "pm.environment.set('temp_provider_email', providerData.email);",
                  "pm.environment.set('temp_provider_phone', providerData.phone);",
                  "pm.environment.set('temp_provider_password', providerData.password);",
                  "pm.environment.set('temp_business_name_ar', providerData.businessNameAr);",
                  "pm.environment.set('temp_business_name_en', providerData.businessNameEn);",
                  "pm.environment.set('temp_owner_name', providerData.ownerName);",
                  "pm.environment.set('temp_license_number', providerData.licenseNumber);",
                  "pm.environment.set('temp_latitude', providerData.latitude);",
                  "pm.environment.set('temp_longitude', providerData.longitude);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "927b2210-7002-4083-95d6-9f631d412773",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Provider created successfully\", function () {",
                  "    if (pm.response.code === 500) {",
                  "        console.error('‚ùå Server error creating provider:', pm.response.json());",
                  "        console.log('Check that the API server is running and database is connected');",
                  "        pm.expect.fail('Server error - is the API running on port 3000?');",
                  "    }",
                  "    ",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data).to.have.property('provider');",
                  "    pm.expect(response.data.provider).to.have.property('id');",
                  "    pm.expect(response.data).to.have.property('token');",
                  "    ",
                  "    // Store provider data",
                  "    pm.environment.set('test_provider_id', response.data.provider.id);",
                  "    pm.environment.set('test_provider_token', response.data.token);",
                  "    pm.environment.set('test_provider_email', pm.environment.get('temp_provider_email'));",
                  "    pm.environment.set('test_provider_password', pm.environment.get('temp_provider_password'));",
                  "    ",
                  "    console.log('‚úÖ Created test provider:', response.data.provider.id);",
                  "});"
                ],
                "_lastExecutionId": "7ae66907-a5f2-4376-a3e1-56c9fea50bea"
              }
            }
          ]
        },
        "parent": {
          "id": "1c7deb03-74a7-4e4b-9af6-10e2ac4181e3",
          "name": "Test Providers",
          "item": [
            {
              "id": "87b466e4-a4d1-4eeb-be8b-dfecc6173763",
              "name": "Create Test Provider 1",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "provider",
                    "signup"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "X-CSRF-Token",
                    "value": "{{csrf_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{temp_provider_email}}\",\n  \"password\": \"{{temp_provider_password}}\",\n  \"phone\": \"{{temp_provider_phone}}\",\n  \"business_name_ar\": \"{{temp_business_name_ar}}\",\n  \"business_name_en\": \"{{temp_business_name_en}}\",\n  \"owner_name\": \"{{temp_owner_name}}\",\n  \"address\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Amman\",\n    \"district\": \"Abdali\",\n    \"country\": \"Jordan\"\n  },\n  \"license_number\": \"{{temp_license_number}}\",\n  \"phoneVerified\": true,\n  \"latitude\": {{temp_latitude}},\n  \"longitude\": {{temp_longitude}}\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "pre-request",
                  "script": {
                    "id": "040240a5-16b7-496f-a686-668d1009b447",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique provider data",
                      "const timestamp = Date.now();",
                      "const providerData = {",
                      "    email: `provider${timestamp}@test.com`,",
                      "    phone: `+96278${Math.floor(Math.random() * 10000000).toString().padStart(7, '0')}`,",
                      "    password: 'TestProvider123!',",
                      "    businessNameAr: 'ÿµÿßŸÑŸàŸÜ ÿßŸÑÿ™ÿ¨ŸÖŸäŸÑ ÿßŸÑÿ™ÿ¨ÿ±Ÿäÿ®Ÿä',",
                      "    businessNameEn: 'Test Beauty Salon',",
                      "    ownerName: 'Test Provider Owner',",
                      "    licenseNumber: `LIC-${timestamp}`,",
                      "    latitude: 31.9539 + (Math.random() * 0.01),",
                      "    longitude: 35.9106 + (Math.random() * 0.01)",
                      "};",
                      "",
                      "// Store in environment for the request",
                      "pm.environment.set('temp_provider_email', providerData.email);",
                      "pm.environment.set('temp_provider_phone', providerData.phone);",
                      "pm.environment.set('temp_provider_password', providerData.password);",
                      "pm.environment.set('temp_business_name_ar', providerData.businessNameAr);",
                      "pm.environment.set('temp_business_name_en', providerData.businessNameEn);",
                      "pm.environment.set('temp_owner_name', providerData.ownerName);",
                      "pm.environment.set('temp_license_number', providerData.licenseNumber);",
                      "pm.environment.set('temp_latitude', providerData.latitude);",
                      "pm.environment.set('temp_longitude', providerData.longitude);"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "927b2210-7002-4083-95d6-9f631d412773",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Provider created successfully\", function () {",
                      "    if (pm.response.code === 500) {",
                      "        console.error('‚ùå Server error creating provider:', pm.response.json());",
                      "        console.log('Check that the API server is running and database is connected');",
                      "        pm.expect.fail('Server error - is the API running on port 3000?');",
                      "    }",
                      "    ",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "    pm.expect(response.data).to.have.property('provider');",
                      "    pm.expect(response.data.provider).to.have.property('id');",
                      "    pm.expect(response.data).to.have.property('token');",
                      "    ",
                      "    // Store provider data",
                      "    pm.environment.set('test_provider_id', response.data.provider.id);",
                      "    pm.environment.set('test_provider_token', response.data.token);",
                      "    pm.environment.set('test_provider_email', pm.environment.get('temp_provider_email'));",
                      "    pm.environment.set('test_provider_password', pm.environment.get('temp_provider_password'));",
                      "    ",
                      "    console.log('‚úÖ Created test provider:', response.data.provider.id);",
                      "});"
                    ],
                    "_lastExecutionId": "7ae66907-a5f2-4376-a3e1-56c9fea50bea"
                  }
                }
              ]
            },
            {
              "id": "4735665c-b0c8-4421-af62-b8909c7d2310",
              "name": "Create Test Provider 2",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "provider",
                    "signup"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "X-CSRF-Token",
                    "value": "{{csrf_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{temp_provider_email}}\",\n  \"password\": \"{{temp_provider_password}}\",\n  \"phone\": \"{{temp_provider_phone}}\",\n  \"business_name_ar\": \"{{temp_business_name_ar}}\",\n  \"business_name_en\": \"{{temp_business_name_en}}\",\n  \"owner_name\": \"{{temp_owner_name}}\",\n  \"address\": {\n    \"street\": \"456 Test Avenue\",\n    \"city\": \"Amman\",\n    \"district\": \"Sweifieh\",\n    \"country\": \"Jordan\"\n  },\n  \"license_number\": \"{{temp_license_number}}\",\n  \"phoneVerified\": true,\n  \"latitude\": {{temp_latitude}},\n  \"longitude\": {{temp_longitude}}\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "pre-request",
                  "script": {
                    "id": "2e84d2fa-6949-499c-89c7-2b0cd7761fb5",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique provider data",
                      "const timestamp = Date.now();",
                      "const providerData = {",
                      "    email: `provider2_${timestamp}@test.com`,",
                      "    phone: `+96279${Math.floor(Math.random() * 10000000).toString().padStart(7, '0')}`,",
                      "    password: 'TestProvider123!',",
                      "    businessNameAr: 'ŸÖÿ±ŸÉÿ≤ ÿßŸÑÿ™ÿ¨ŸÖŸäŸÑ ÿßŸÑÿ™ÿ¨ÿ±Ÿäÿ®Ÿä',",
                      "    businessNameEn: 'Test Beauty Center',",
                      "    ownerName: 'Test Provider 2 Owner',",
                      "    licenseNumber: `LIC2-${timestamp}`,",
                      "    latitude: 31.9639 + (Math.random() * 0.01),",
                      "    longitude: 35.9206 + (Math.random() * 0.01)",
                      "};",
                      "",
                      "// Store in environment for the request",
                      "pm.environment.set('temp_provider_email', providerData.email);",
                      "pm.environment.set('temp_provider_phone', providerData.phone);",
                      "pm.environment.set('temp_provider_password', providerData.password);",
                      "pm.environment.set('temp_business_name_ar', providerData.businessNameAr);",
                      "pm.environment.set('temp_business_name_en', providerData.businessNameEn);",
                      "pm.environment.set('temp_owner_name', providerData.ownerName);",
                      "pm.environment.set('temp_license_number', providerData.licenseNumber);",
                      "pm.environment.set('temp_latitude', providerData.latitude);",
                      "pm.environment.set('temp_longitude', providerData.longitude);"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "692108d6-0ea2-4a41-9558-42f4ad86160e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Provider 2 created successfully\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "    pm.expect(response.data).to.have.property('provider');",
                      "    pm.expect(response.data.provider).to.have.property('id');",
                      "    pm.expect(response.data).to.have.property('token');",
                      "    ",
                      "    // Store provider 2 data",
                      "    pm.environment.set('test_provider_2_id', response.data.provider.id);",
                      "    pm.environment.set('test_provider_2_token', response.data.token);",
                      "    ",
                      "    console.log('Created test provider 2:', response.data.provider.id);",
                      "});"
                    ],
                    "_lastExecutionId": "9b818a3c-b9c5-47e4-9bcf-579b06d561dc"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1c7dbb81-841a-4fba-97c3-d57aae9e25c9",
          "length": 8,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "05d9c468-2a9f-4b1d-9096-275aa99dab88",
          "scriptId": "927b2210-7002-4083-95d6-9f631d412773",
          "execution": "7ae66907-a5f2-4376-a3e1-56c9fea50bea"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1611:16)",
          "checksum": "766c5ac08b93aee30d0f2d760d8b05cb",
          "id": "6862e239-7010-405f-8ef9-7e13483f175e",
          "timestamp": 1754745204924,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1611,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "4735665c-b0c8-4421-af62-b8909c7d2310",
          "name": "Create Test Provider 2",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "api",
                "auth",
                "provider",
                "signup"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "X-CSRF-Token",
                "value": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "ae0cd77f-a1e7-4621-8789-74e26cc38695",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{temp_provider_email}}\",\n  \"password\": \"{{temp_provider_password}}\",\n  \"phone\": \"{{temp_provider_phone}}\",\n  \"business_name_ar\": \"{{temp_business_name_ar}}\",\n  \"business_name_en\": \"{{temp_business_name_en}}\",\n  \"owner_name\": \"{{temp_owner_name}}\",\n  \"address\": {\n    \"street\": \"456 Test Avenue\",\n    \"city\": \"Amman\",\n    \"district\": \"Sweifieh\",\n    \"country\": \"Jordan\"\n  },\n  \"license_number\": \"{{temp_license_number}}\",\n  \"phoneVerified\": true,\n  \"latitude\": {{temp_latitude}},\n  \"longitude\": {{temp_longitude}}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "pre-request",
              "script": {
                "id": "2e84d2fa-6949-499c-89c7-2b0cd7761fb5",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique provider data",
                  "const timestamp = Date.now();",
                  "const providerData = {",
                  "    email: `provider2_${timestamp}@test.com`,",
                  "    phone: `+96279${Math.floor(Math.random() * 10000000).toString().padStart(7, '0')}`,",
                  "    password: 'TestProvider123!',",
                  "    businessNameAr: 'ŸÖÿ±ŸÉÿ≤ ÿßŸÑÿ™ÿ¨ŸÖŸäŸÑ ÿßŸÑÿ™ÿ¨ÿ±Ÿäÿ®Ÿä',",
                  "    businessNameEn: 'Test Beauty Center',",
                  "    ownerName: 'Test Provider 2 Owner',",
                  "    licenseNumber: `LIC2-${timestamp}`,",
                  "    latitude: 31.9639 + (Math.random() * 0.01),",
                  "    longitude: 35.9206 + (Math.random() * 0.01)",
                  "};",
                  "",
                  "// Store in environment for the request",
                  "pm.environment.set('temp_provider_email', providerData.email);",
                  "pm.environment.set('temp_provider_phone', providerData.phone);",
                  "pm.environment.set('temp_provider_password', providerData.password);",
                  "pm.environment.set('temp_business_name_ar', providerData.businessNameAr);",
                  "pm.environment.set('temp_business_name_en', providerData.businessNameEn);",
                  "pm.environment.set('temp_owner_name', providerData.ownerName);",
                  "pm.environment.set('temp_license_number', providerData.licenseNumber);",
                  "pm.environment.set('temp_latitude', providerData.latitude);",
                  "pm.environment.set('temp_longitude', providerData.longitude);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "692108d6-0ea2-4a41-9558-42f4ad86160e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Provider 2 created successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data).to.have.property('provider');",
                  "    pm.expect(response.data.provider).to.have.property('id');",
                  "    pm.expect(response.data).to.have.property('token');",
                  "    ",
                  "    // Store provider 2 data",
                  "    pm.environment.set('test_provider_2_id', response.data.provider.id);",
                  "    pm.environment.set('test_provider_2_token', response.data.token);",
                  "    ",
                  "    console.log('Created test provider 2:', response.data.provider.id);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "6f8bf78a-f66c-4696-ac8d-1d498f908690",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2b7d0794-31c9-42c3-bacb-67f82993397b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Provider 2 created successfully",
          "message": "expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "a33dd14df86406be0d25f870217d5be0",
          "id": "70ed9cff-0b60-4ad0-88a6-51a128a8409f",
          "timestamp": 1754745204934,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4735665c-b0c8-4421-af62-b8909c7d2310",
          "name": "Create Test Provider 2",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "provider",
                "signup"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "X-CSRF-Token",
                "value": "{{csrf_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{temp_provider_email}}\",\n  \"password\": \"{{temp_provider_password}}\",\n  \"phone\": \"{{temp_provider_phone}}\",\n  \"business_name_ar\": \"{{temp_business_name_ar}}\",\n  \"business_name_en\": \"{{temp_business_name_en}}\",\n  \"owner_name\": \"{{temp_owner_name}}\",\n  \"address\": {\n    \"street\": \"456 Test Avenue\",\n    \"city\": \"Amman\",\n    \"district\": \"Sweifieh\",\n    \"country\": \"Jordan\"\n  },\n  \"license_number\": \"{{temp_license_number}}\",\n  \"phoneVerified\": true,\n  \"latitude\": {{temp_latitude}},\n  \"longitude\": {{temp_longitude}}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "pre-request",
              "script": {
                "id": "2e84d2fa-6949-499c-89c7-2b0cd7761fb5",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique provider data",
                  "const timestamp = Date.now();",
                  "const providerData = {",
                  "    email: `provider2_${timestamp}@test.com`,",
                  "    phone: `+96279${Math.floor(Math.random() * 10000000).toString().padStart(7, '0')}`,",
                  "    password: 'TestProvider123!',",
                  "    businessNameAr: 'ŸÖÿ±ŸÉÿ≤ ÿßŸÑÿ™ÿ¨ŸÖŸäŸÑ ÿßŸÑÿ™ÿ¨ÿ±Ÿäÿ®Ÿä',",
                  "    businessNameEn: 'Test Beauty Center',",
                  "    ownerName: 'Test Provider 2 Owner',",
                  "    licenseNumber: `LIC2-${timestamp}`,",
                  "    latitude: 31.9639 + (Math.random() * 0.01),",
                  "    longitude: 35.9206 + (Math.random() * 0.01)",
                  "};",
                  "",
                  "// Store in environment for the request",
                  "pm.environment.set('temp_provider_email', providerData.email);",
                  "pm.environment.set('temp_provider_phone', providerData.phone);",
                  "pm.environment.set('temp_provider_password', providerData.password);",
                  "pm.environment.set('temp_business_name_ar', providerData.businessNameAr);",
                  "pm.environment.set('temp_business_name_en', providerData.businessNameEn);",
                  "pm.environment.set('temp_owner_name', providerData.ownerName);",
                  "pm.environment.set('temp_license_number', providerData.licenseNumber);",
                  "pm.environment.set('temp_latitude', providerData.latitude);",
                  "pm.environment.set('temp_longitude', providerData.longitude);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "692108d6-0ea2-4a41-9558-42f4ad86160e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Provider 2 created successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data).to.have.property('provider');",
                  "    pm.expect(response.data.provider).to.have.property('id');",
                  "    pm.expect(response.data).to.have.property('token');",
                  "    ",
                  "    // Store provider 2 data",
                  "    pm.environment.set('test_provider_2_id', response.data.provider.id);",
                  "    pm.environment.set('test_provider_2_token', response.data.token);",
                  "    ",
                  "    console.log('Created test provider 2:', response.data.provider.id);",
                  "});"
                ],
                "_lastExecutionId": "9b818a3c-b9c5-47e4-9bcf-579b06d561dc"
              }
            }
          ]
        },
        "parent": {
          "id": "1c7deb03-74a7-4e4b-9af6-10e2ac4181e3",
          "name": "Test Providers",
          "item": [
            {
              "id": "87b466e4-a4d1-4eeb-be8b-dfecc6173763",
              "name": "Create Test Provider 1",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "provider",
                    "signup"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "X-CSRF-Token",
                    "value": "{{csrf_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{temp_provider_email}}\",\n  \"password\": \"{{temp_provider_password}}\",\n  \"phone\": \"{{temp_provider_phone}}\",\n  \"business_name_ar\": \"{{temp_business_name_ar}}\",\n  \"business_name_en\": \"{{temp_business_name_en}}\",\n  \"owner_name\": \"{{temp_owner_name}}\",\n  \"address\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Amman\",\n    \"district\": \"Abdali\",\n    \"country\": \"Jordan\"\n  },\n  \"license_number\": \"{{temp_license_number}}\",\n  \"phoneVerified\": true,\n  \"latitude\": {{temp_latitude}},\n  \"longitude\": {{temp_longitude}}\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "pre-request",
                  "script": {
                    "id": "040240a5-16b7-496f-a686-668d1009b447",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique provider data",
                      "const timestamp = Date.now();",
                      "const providerData = {",
                      "    email: `provider${timestamp}@test.com`,",
                      "    phone: `+96278${Math.floor(Math.random() * 10000000).toString().padStart(7, '0')}`,",
                      "    password: 'TestProvider123!',",
                      "    businessNameAr: 'ÿµÿßŸÑŸàŸÜ ÿßŸÑÿ™ÿ¨ŸÖŸäŸÑ ÿßŸÑÿ™ÿ¨ÿ±Ÿäÿ®Ÿä',",
                      "    businessNameEn: 'Test Beauty Salon',",
                      "    ownerName: 'Test Provider Owner',",
                      "    licenseNumber: `LIC-${timestamp}`,",
                      "    latitude: 31.9539 + (Math.random() * 0.01),",
                      "    longitude: 35.9106 + (Math.random() * 0.01)",
                      "};",
                      "",
                      "// Store in environment for the request",
                      "pm.environment.set('temp_provider_email', providerData.email);",
                      "pm.environment.set('temp_provider_phone', providerData.phone);",
                      "pm.environment.set('temp_provider_password', providerData.password);",
                      "pm.environment.set('temp_business_name_ar', providerData.businessNameAr);",
                      "pm.environment.set('temp_business_name_en', providerData.businessNameEn);",
                      "pm.environment.set('temp_owner_name', providerData.ownerName);",
                      "pm.environment.set('temp_license_number', providerData.licenseNumber);",
                      "pm.environment.set('temp_latitude', providerData.latitude);",
                      "pm.environment.set('temp_longitude', providerData.longitude);"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "927b2210-7002-4083-95d6-9f631d412773",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Provider created successfully\", function () {",
                      "    if (pm.response.code === 500) {",
                      "        console.error('‚ùå Server error creating provider:', pm.response.json());",
                      "        console.log('Check that the API server is running and database is connected');",
                      "        pm.expect.fail('Server error - is the API running on port 3000?');",
                      "    }",
                      "    ",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "    pm.expect(response.data).to.have.property('provider');",
                      "    pm.expect(response.data.provider).to.have.property('id');",
                      "    pm.expect(response.data).to.have.property('token');",
                      "    ",
                      "    // Store provider data",
                      "    pm.environment.set('test_provider_id', response.data.provider.id);",
                      "    pm.environment.set('test_provider_token', response.data.token);",
                      "    pm.environment.set('test_provider_email', pm.environment.get('temp_provider_email'));",
                      "    pm.environment.set('test_provider_password', pm.environment.get('temp_provider_password'));",
                      "    ",
                      "    console.log('‚úÖ Created test provider:', response.data.provider.id);",
                      "});"
                    ],
                    "_lastExecutionId": "7ae66907-a5f2-4376-a3e1-56c9fea50bea"
                  }
                }
              ]
            },
            {
              "id": "4735665c-b0c8-4421-af62-b8909c7d2310",
              "name": "Create Test Provider 2",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "provider",
                    "signup"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "X-CSRF-Token",
                    "value": "{{csrf_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{temp_provider_email}}\",\n  \"password\": \"{{temp_provider_password}}\",\n  \"phone\": \"{{temp_provider_phone}}\",\n  \"business_name_ar\": \"{{temp_business_name_ar}}\",\n  \"business_name_en\": \"{{temp_business_name_en}}\",\n  \"owner_name\": \"{{temp_owner_name}}\",\n  \"address\": {\n    \"street\": \"456 Test Avenue\",\n    \"city\": \"Amman\",\n    \"district\": \"Sweifieh\",\n    \"country\": \"Jordan\"\n  },\n  \"license_number\": \"{{temp_license_number}}\",\n  \"phoneVerified\": true,\n  \"latitude\": {{temp_latitude}},\n  \"longitude\": {{temp_longitude}}\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "pre-request",
                  "script": {
                    "id": "2e84d2fa-6949-499c-89c7-2b0cd7761fb5",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique provider data",
                      "const timestamp = Date.now();",
                      "const providerData = {",
                      "    email: `provider2_${timestamp}@test.com`,",
                      "    phone: `+96279${Math.floor(Math.random() * 10000000).toString().padStart(7, '0')}`,",
                      "    password: 'TestProvider123!',",
                      "    businessNameAr: 'ŸÖÿ±ŸÉÿ≤ ÿßŸÑÿ™ÿ¨ŸÖŸäŸÑ ÿßŸÑÿ™ÿ¨ÿ±Ÿäÿ®Ÿä',",
                      "    businessNameEn: 'Test Beauty Center',",
                      "    ownerName: 'Test Provider 2 Owner',",
                      "    licenseNumber: `LIC2-${timestamp}`,",
                      "    latitude: 31.9639 + (Math.random() * 0.01),",
                      "    longitude: 35.9206 + (Math.random() * 0.01)",
                      "};",
                      "",
                      "// Store in environment for the request",
                      "pm.environment.set('temp_provider_email', providerData.email);",
                      "pm.environment.set('temp_provider_phone', providerData.phone);",
                      "pm.environment.set('temp_provider_password', providerData.password);",
                      "pm.environment.set('temp_business_name_ar', providerData.businessNameAr);",
                      "pm.environment.set('temp_business_name_en', providerData.businessNameEn);",
                      "pm.environment.set('temp_owner_name', providerData.ownerName);",
                      "pm.environment.set('temp_license_number', providerData.licenseNumber);",
                      "pm.environment.set('temp_latitude', providerData.latitude);",
                      "pm.environment.set('temp_longitude', providerData.longitude);"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "692108d6-0ea2-4a41-9558-42f4ad86160e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Provider 2 created successfully\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "    pm.expect(response.data).to.have.property('provider');",
                      "    pm.expect(response.data.provider).to.have.property('id');",
                      "    pm.expect(response.data).to.have.property('token');",
                      "    ",
                      "    // Store provider 2 data",
                      "    pm.environment.set('test_provider_2_id', response.data.provider.id);",
                      "    pm.environment.set('test_provider_2_token', response.data.token);",
                      "    ",
                      "    console.log('Created test provider 2:', response.data.provider.id);",
                      "});"
                    ],
                    "_lastExecutionId": "9b818a3c-b9c5-47e4-9bcf-579b06d561dc"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6f8bf78a-f66c-4696-ac8d-1d498f908690",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2b7d0794-31c9-42c3-bacb-67f82993397b",
          "scriptId": "692108d6-0ea2-4a41-9558-42f4ad86160e",
          "execution": "9b818a3c-b9c5-47e4-9bcf-579b06d561dc"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1611:16)",
          "checksum": "766c5ac08b93aee30d0f2d760d8b05cb",
          "id": "0de78d9c-1e13-4412-a207-08b441b3a245",
          "timestamp": 1754745205474,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1611,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "0a0313c6-6152-4e4d-bac4-65c40deeb122",
          "name": "Create Service 1 for Provider 1",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "api",
                "services"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_provider_token}}"
              },
              {
                "key": "X-CSRF-Token",
                "value": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "bb18ef73-c664-4b3c-8e56-bcbc2bae595b",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name_ar\": \"ŸÇÿµ ÿßŸÑÿ¥ÿπÿ±\",\n  \"name_en\": \"Hair Cut\",\n  \"description_ar\": \"ŸÇÿµ ÿ¥ÿπÿ± ÿßÿ≠ÿ™ÿ±ÿßŸÅŸä ŸÖÿπ ÿ™ÿµŸÅŸäŸÅ\",\n  \"description_en\": \"Professional haircut with styling\",\n  \"category\": \"HAIR\",\n  \"price\": 15.00,\n  \"duration_minutes\": 30\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "245cf06e-a125-4d31-9c01-974bed5193a9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Service 1 created successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    ",
                  "    // Store service ID",
                  "    pm.environment.set('test_service_id', response.data.id);",
                  "    ",
                  "    console.log('Created test service 1:', response.data.id);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "db122c62-f4cf-4c76-aa5e-0d84cc4beca2",
          "length": 8,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5f4c658f-1303-4580-9ff5-66d66ffd9532"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Service 1 created successfully",
          "message": "expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "4ef52f95f8045fff4cae65c90ede4e0a",
          "id": "aaeaf49b-022f-42e2-be76-57d66668e494",
          "timestamp": 1754745205486,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "0a0313c6-6152-4e4d-bac4-65c40deeb122",
          "name": "Create Service 1 for Provider 1",
          "request": {
            "url": {
              "path": [
                "api",
                "services"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_provider_token}}"
              },
              {
                "key": "X-CSRF-Token",
                "value": "{{csrf_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name_ar\": \"ŸÇÿµ ÿßŸÑÿ¥ÿπÿ±\",\n  \"name_en\": \"Hair Cut\",\n  \"description_ar\": \"ŸÇÿµ ÿ¥ÿπÿ± ÿßÿ≠ÿ™ÿ±ÿßŸÅŸä ŸÖÿπ ÿ™ÿµŸÅŸäŸÅ\",\n  \"description_en\": \"Professional haircut with styling\",\n  \"category\": \"HAIR\",\n  \"price\": 15.00,\n  \"duration_minutes\": 30\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "245cf06e-a125-4d31-9c01-974bed5193a9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Service 1 created successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    ",
                  "    // Store service ID",
                  "    pm.environment.set('test_service_id', response.data.id);",
                  "    ",
                  "    console.log('Created test service 1:', response.data.id);",
                  "});"
                ],
                "_lastExecutionId": "3b397aaa-edaa-4d3c-915a-7b486f9a6005"
              }
            }
          ]
        },
        "parent": {
          "id": "31c74e66-cae2-4756-9353-f5d2243d293c",
          "name": "Test Services",
          "item": [
            {
              "id": "0a0313c6-6152-4e4d-bac4-65c40deeb122",
              "name": "Create Service 1 for Provider 1",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "services"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{test_provider_token}}"
                  },
                  {
                    "key": "X-CSRF-Token",
                    "value": "{{csrf_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name_ar\": \"ŸÇÿµ ÿßŸÑÿ¥ÿπÿ±\",\n  \"name_en\": \"Hair Cut\",\n  \"description_ar\": \"ŸÇÿµ ÿ¥ÿπÿ± ÿßÿ≠ÿ™ÿ±ÿßŸÅŸä ŸÖÿπ ÿ™ÿµŸÅŸäŸÅ\",\n  \"description_en\": \"Professional haircut with styling\",\n  \"category\": \"HAIR\",\n  \"price\": 15.00,\n  \"duration_minutes\": 30\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "245cf06e-a125-4d31-9c01-974bed5193a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Service 1 created successfully\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "    pm.expect(response.data).to.have.property('id');",
                      "    ",
                      "    // Store service ID",
                      "    pm.environment.set('test_service_id', response.data.id);",
                      "    ",
                      "    console.log('Created test service 1:', response.data.id);",
                      "});"
                    ],
                    "_lastExecutionId": "3b397aaa-edaa-4d3c-915a-7b486f9a6005"
                  }
                }
              ]
            },
            {
              "id": "05d72cee-7a88-43eb-bb0d-e8213306a8fa",
              "name": "Create Service 2 for Provider 1",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "services"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{test_provider_token}}"
                  },
                  {
                    "key": "X-CSRF-Token",
                    "value": "{{csrf_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name_ar\": \"ÿµÿ®ÿ∫ÿ© ÿßŸÑÿ¥ÿπÿ±\",\n  \"name_en\": \"Hair Coloring\",\n  \"description_ar\": \"ÿµÿ®ÿ∫ÿ© ÿ¥ÿπÿ± ÿßÿ≠ÿ™ÿ±ÿßŸÅŸäÿ© ÿ®ÿ£ŸÑŸàÿßŸÜ ÿπÿµÿ±Ÿäÿ©\",\n  \"description_en\": \"Professional hair coloring with modern colors\",\n  \"category\": \"HAIR\",\n  \"price\": 45.00,\n  \"duration_minutes\": 120\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f47cd40a-af26-4339-a592-1aa0942386a3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Service 2 created successfully\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "    pm.expect(response.data).to.have.property('id');",
                      "    ",
                      "    // Store service ID",
                      "    pm.environment.set('test_service_2_id', response.data.id);",
                      "    ",
                      "    console.log('Created test service 2:', response.data.id);",
                      "});"
                    ],
                    "_lastExecutionId": "3e268f07-75cb-4684-aa5b-d17e0bb7a8f1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "db122c62-f4cf-4c76-aa5e-0d84cc4beca2",
          "length": 8,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5f4c658f-1303-4580-9ff5-66d66ffd9532",
          "scriptId": "245cf06e-a125-4d31-9c01-974bed5193a9",
          "execution": "3b397aaa-edaa-4d3c-915a-7b486f9a6005"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1611:16)",
          "checksum": "766c5ac08b93aee30d0f2d760d8b05cb",
          "id": "85002b10-d481-43f6-8df4-bb8697141e58",
          "timestamp": 1754745206019,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1611,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "05d72cee-7a88-43eb-bb0d-e8213306a8fa",
          "name": "Create Service 2 for Provider 1",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "api",
                "services"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_provider_token}}"
              },
              {
                "key": "X-CSRF-Token",
                "value": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "433680eb-5b88-4a52-bd6b-3e7e48f099c9",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name_ar\": \"ÿµÿ®ÿ∫ÿ© ÿßŸÑÿ¥ÿπÿ±\",\n  \"name_en\": \"Hair Coloring\",\n  \"description_ar\": \"ÿµÿ®ÿ∫ÿ© ÿ¥ÿπÿ± ÿßÿ≠ÿ™ÿ±ÿßŸÅŸäÿ© ÿ®ÿ£ŸÑŸàÿßŸÜ ÿπÿµÿ±Ÿäÿ©\",\n  \"description_en\": \"Professional hair coloring with modern colors\",\n  \"category\": \"HAIR\",\n  \"price\": 45.00,\n  \"duration_minutes\": 120\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f47cd40a-af26-4339-a592-1aa0942386a3",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Service 2 created successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    ",
                  "    // Store service ID",
                  "    pm.environment.set('test_service_2_id', response.data.id);",
                  "    ",
                  "    console.log('Created test service 2:', response.data.id);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "521b030c-e170-4881-8256-739de4a4d1e7",
          "length": 8,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7048edab-b474-4ecd-99b7-8ffab3487cc5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Service 2 created successfully",
          "message": "expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "2d4e1360b53fa2c70b82844658e16c75",
          "id": "aaa46478-ee83-446f-a43b-85beaababace",
          "timestamp": 1754745206057,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "05d72cee-7a88-43eb-bb0d-e8213306a8fa",
          "name": "Create Service 2 for Provider 1",
          "request": {
            "url": {
              "path": [
                "api",
                "services"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_provider_token}}"
              },
              {
                "key": "X-CSRF-Token",
                "value": "{{csrf_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name_ar\": \"ÿµÿ®ÿ∫ÿ© ÿßŸÑÿ¥ÿπÿ±\",\n  \"name_en\": \"Hair Coloring\",\n  \"description_ar\": \"ÿµÿ®ÿ∫ÿ© ÿ¥ÿπÿ± ÿßÿ≠ÿ™ÿ±ÿßŸÅŸäÿ© ÿ®ÿ£ŸÑŸàÿßŸÜ ÿπÿµÿ±Ÿäÿ©\",\n  \"description_en\": \"Professional hair coloring with modern colors\",\n  \"category\": \"HAIR\",\n  \"price\": 45.00,\n  \"duration_minutes\": 120\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f47cd40a-af26-4339-a592-1aa0942386a3",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Service 2 created successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    ",
                  "    // Store service ID",
                  "    pm.environment.set('test_service_2_id', response.data.id);",
                  "    ",
                  "    console.log('Created test service 2:', response.data.id);",
                  "});"
                ],
                "_lastExecutionId": "3e268f07-75cb-4684-aa5b-d17e0bb7a8f1"
              }
            }
          ]
        },
        "parent": {
          "id": "31c74e66-cae2-4756-9353-f5d2243d293c",
          "name": "Test Services",
          "item": [
            {
              "id": "0a0313c6-6152-4e4d-bac4-65c40deeb122",
              "name": "Create Service 1 for Provider 1",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "services"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{test_provider_token}}"
                  },
                  {
                    "key": "X-CSRF-Token",
                    "value": "{{csrf_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name_ar\": \"ŸÇÿµ ÿßŸÑÿ¥ÿπÿ±\",\n  \"name_en\": \"Hair Cut\",\n  \"description_ar\": \"ŸÇÿµ ÿ¥ÿπÿ± ÿßÿ≠ÿ™ÿ±ÿßŸÅŸä ŸÖÿπ ÿ™ÿµŸÅŸäŸÅ\",\n  \"description_en\": \"Professional haircut with styling\",\n  \"category\": \"HAIR\",\n  \"price\": 15.00,\n  \"duration_minutes\": 30\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "245cf06e-a125-4d31-9c01-974bed5193a9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Service 1 created successfully\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "    pm.expect(response.data).to.have.property('id');",
                      "    ",
                      "    // Store service ID",
                      "    pm.environment.set('test_service_id', response.data.id);",
                      "    ",
                      "    console.log('Created test service 1:', response.data.id);",
                      "});"
                    ],
                    "_lastExecutionId": "3b397aaa-edaa-4d3c-915a-7b486f9a6005"
                  }
                }
              ]
            },
            {
              "id": "05d72cee-7a88-43eb-bb0d-e8213306a8fa",
              "name": "Create Service 2 for Provider 1",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "services"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{test_provider_token}}"
                  },
                  {
                    "key": "X-CSRF-Token",
                    "value": "{{csrf_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name_ar\": \"ÿµÿ®ÿ∫ÿ© ÿßŸÑÿ¥ÿπÿ±\",\n  \"name_en\": \"Hair Coloring\",\n  \"description_ar\": \"ÿµÿ®ÿ∫ÿ© ÿ¥ÿπÿ± ÿßÿ≠ÿ™ÿ±ÿßŸÅŸäÿ© ÿ®ÿ£ŸÑŸàÿßŸÜ ÿπÿµÿ±Ÿäÿ©\",\n  \"description_en\": \"Professional hair coloring with modern colors\",\n  \"category\": \"HAIR\",\n  \"price\": 45.00,\n  \"duration_minutes\": 120\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f47cd40a-af26-4339-a592-1aa0942386a3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Service 2 created successfully\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "    pm.expect(response.data).to.have.property('id');",
                      "    ",
                      "    // Store service ID",
                      "    pm.environment.set('test_service_2_id', response.data.id);",
                      "    ",
                      "    console.log('Created test service 2:', response.data.id);",
                      "});"
                    ],
                    "_lastExecutionId": "3e268f07-75cb-4684-aa5b-d17e0bb7a8f1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "521b030c-e170-4881-8256-739de4a4d1e7",
          "length": 8,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7048edab-b474-4ecd-99b7-8ffab3487cc5",
          "scriptId": "f47cd40a-af26-4339-a592-1aa0942386a3",
          "execution": "3e268f07-75cb-4684-aa5b-d17e0bb7a8f1"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1611:16)",
          "checksum": "766c5ac08b93aee30d0f2d760d8b05cb",
          "id": "ee0f4641-3ab9-4963-8d89-b39e8081216b",
          "timestamp": 1754745206586,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1611,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "16b176f2-62ea-49ee-9b83-cf22cb84c852",
          "name": "Create Test Customer",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "api",
                "auth",
                "customer",
                "signup"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "X-CSRF-Token",
                "value": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "75195269-6aee-46f5-a07c-466d047bf30c",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"{{test_customer_password}}\",\n  \"phone\": \"+962791234567\",\n  \"name\": \"{{test_customer_name}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "pre-request",
              "script": {
                "id": "3da4e60c-a989-42d5-9b75-7a48ad448afd",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique customer data",
                  "const timestamp = Date.now();",
                  "const customerData = {",
                  "    email: `customer${timestamp}@test.com`,",
                  "    phone: `+96279${Math.floor(Math.random() * 10000000).toString().padStart(7, '0')}`,",
                  "    password: 'TestCustomer123!',",
                  "    fullName: 'Test Customer'",
                  "};",
                  "",
                  "// Store in environment",
                  "pm.environment.set('test_customer_email', customerData.email);",
                  "pm.environment.set('test_customer_phone', customerData.phone);",
                  "pm.environment.set('test_customer_password', customerData.password);",
                  "pm.environment.set('test_customer_name', customerData.fullName);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d493f1f3-5ad4-407c-9e5a-b648e5a5fdb0",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Customer created successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data).to.have.property('user');",
                  "    pm.expect(response.data.user).to.have.property('id');",
                  "    pm.expect(response.data).to.have.property('token');",
                  "    ",
                  "    // Store customer data",
                  "    pm.environment.set('test_customer_id', response.data.user.id);",
                  "    pm.environment.set('customer_token', response.data.token);",
                  "    ",
                  "    console.log('Created test customer:', response.data.user.id);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "aefd1c96-2333-4108-ad0a-9acf6d9811a7",
          "length": 8,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "78a93906-7626-49cb-ad5a-a46b91e8a2ac"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Customer created successfully",
          "message": "expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ ‚Ä¶(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "21f642b3ba0471ad17e9ef472622582a",
          "id": "bbdc7810-b069-41dc-9eeb-99a9649066c7",
          "timestamp": 1754745206594,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "16b176f2-62ea-49ee-9b83-cf22cb84c852",
          "name": "Create Test Customer",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "customer",
                "signup"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "X-CSRF-Token",
                "value": "{{csrf_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_customer_email}}\",\n  \"password\": \"{{test_customer_password}}\",\n  \"phone\": \"{{test_customer_phone}}\",\n  \"name\": \"{{test_customer_name}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "pre-request",
              "script": {
                "id": "3da4e60c-a989-42d5-9b75-7a48ad448afd",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique customer data",
                  "const timestamp = Date.now();",
                  "const customerData = {",
                  "    email: `customer${timestamp}@test.com`,",
                  "    phone: `+96279${Math.floor(Math.random() * 10000000).toString().padStart(7, '0')}`,",
                  "    password: 'TestCustomer123!',",
                  "    fullName: 'Test Customer'",
                  "};",
                  "",
                  "// Store in environment",
                  "pm.environment.set('test_customer_email', customerData.email);",
                  "pm.environment.set('test_customer_phone', customerData.phone);",
                  "pm.environment.set('test_customer_password', customerData.password);",
                  "pm.environment.set('test_customer_name', customerData.fullName);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d493f1f3-5ad4-407c-9e5a-b648e5a5fdb0",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Customer created successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data).to.have.property('user');",
                  "    pm.expect(response.data.user).to.have.property('id');",
                  "    pm.expect(response.data).to.have.property('token');",
                  "    ",
                  "    // Store customer data",
                  "    pm.environment.set('test_customer_id', response.data.user.id);",
                  "    pm.environment.set('customer_token', response.data.token);",
                  "    ",
                  "    console.log('Created test customer:', response.data.user.id);",
                  "});"
                ],
                "_lastExecutionId": "d1a8e6eb-e328-4351-936a-0ce436fc3d2e"
              }
            }
          ]
        },
        "parent": {
          "id": "10cbbf6b-b742-4667-82aa-204113b01d06",
          "name": "Test Customers",
          "item": [
            {
              "id": "16b176f2-62ea-49ee-9b83-cf22cb84c852",
              "name": "Create Test Customer",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "customer",
                    "signup"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "X-CSRF-Token",
                    "value": "{{csrf_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_customer_email}}\",\n  \"password\": \"{{test_customer_password}}\",\n  \"phone\": \"{{test_customer_phone}}\",\n  \"name\": \"{{test_customer_name}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "pre-request",
                  "script": {
                    "id": "3da4e60c-a989-42d5-9b75-7a48ad448afd",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique customer data",
                      "const timestamp = Date.now();",
                      "const customerData = {",
                      "    email: `customer${timestamp}@test.com`,",
                      "    phone: `+96279${Math.floor(Math.random() * 10000000).toString().padStart(7, '0')}`,",
                      "    password: 'TestCustomer123!',",
                      "    fullName: 'Test Customer'",
                      "};",
                      "",
                      "// Store in environment",
                      "pm.environment.set('test_customer_email', customerData.email);",
                      "pm.environment.set('test_customer_phone', customerData.phone);",
                      "pm.environment.set('test_customer_password', customerData.password);",
                      "pm.environment.set('test_customer_name', customerData.fullName);"
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d493f1f3-5ad4-407c-9e5a-b648e5a5fdb0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Customer created successfully\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "    pm.expect(response.data).to.have.property('user');",
                      "    pm.expect(response.data.user).to.have.property('id');",
                      "    pm.expect(response.data).to.have.property('token');",
                      "    ",
                      "    // Store customer data",
                      "    pm.environment.set('test_customer_id', response.data.user.id);",
                      "    pm.environment.set('customer_token', response.data.token);",
                      "    ",
                      "    console.log('Created test customer:', response.data.user.id);",
                      "});"
                    ],
                    "_lastExecutionId": "d1a8e6eb-e328-4351-936a-0ce436fc3d2e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "aefd1c96-2333-4108-ad0a-9acf6d9811a7",
          "length": 8,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "78a93906-7626-49cb-ad5a-a46b91e8a2ac",
          "scriptId": "d493f1f3-5ad4-407c-9e5a-b648e5a5fdb0",
          "execution": "d1a8e6eb-e328-4351-936a-0ce436fc3d2e"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1611:16)",
          "checksum": "766c5ac08b93aee30d0f2d760d8b05cb",
          "id": "cd3cd823-bb46-44fd-bdda-2574f18f3c6a",
          "timestamp": 1754745207157,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1611,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "4a506ce7-50e6-4ba5-b505-4ba0650be532",
          "name": "Display Test Data Summary",
          "request": {
            "description": {
              "content": "This is just a dummy request to display the test data summary. Check the console for created IDs.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "api",
                "health"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "8d07dfdc-9b8c-492b-a665-b29325ec4791",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cc0b07a1-f3e4-46cf-a366-d8ce5dfc66bd",
                "type": "text/javascript",
                "exec": [
                  "console.log('\\n===== TEST DATA CREATED SUCCESSFULLY =====\\n');",
                  "console.log('Provider 1 ID:', pm.environment.get('test_provider_id'));",
                  "console.log('Provider 2 ID:', pm.environment.get('test_provider_2_id'));",
                  "console.log('Service 1 ID:', pm.environment.get('test_service_id'));",
                  "console.log('Service 2 ID:', pm.environment.get('test_service_2_id'));",
                  "console.log('Customer ID:', pm.environment.get('test_customer_id'));",
                  "console.log('\\nTokens are stored in environment variables.');",
                  "console.log('\\n========================================\\n');",
                  "",
                  "pm.test(\"All test data created\", function () {",
                  "    pm.expect(pm.environment.get('test_provider_id')).to.not.be.undefined;",
                  "    pm.expect(pm.environment.get('test_service_id')).to.not.be.undefined;",
                  "    pm.expect(pm.environment.get('test_customer_id')).to.not.be.undefined;",
                  "    pm.expect(pm.environment.get('customer_token')).to.not.be.undefined;",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "3837129c-ae17-415d-a666-a7f3170a09b7",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6f27ab56-6563-4bce-a411-9adbded17b25"
        }
      }
    ],
    "error": null
  }
}