{
  "info": {
    "_postman_id": "lamsa-api-collection-provider-&-service-management",
    "name": "Lamsa API - Provider & Service Management",
    "description": "Provider marketplace endpoints for searching providers, viewing services, and checking availability.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "lamsa-dev-team"
  },
  "item": [
    {
      "name": "Provider & Service Management",
      "item": [
        {
          "name": "Get Provider Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Provider profile retrieved successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.response.to.have.jsonBody(\"success\", true);",
                  "    pm.response.to.have.jsonBody(\"data\");",
                  "});",
                  "",
                  "pm.test(\"Provider profile has required fields\", function () {",
                  "    const data = pm.response.json().data;",
                  "    pm.expect(data).to.have.property('id');",
                  "    pm.expect(data).to.have.property('businessName');",
                  "    pm.expect(data).to.have.property('phone');",
                  "    pm.expect(data).to.have.property('services');",
                  "    pm.expect(data).to.have.property('availability');",
                  "    pm.expect(data).to.have.property('rating');",
                  "    pm.expect(data).to.have.property('verified');",
                  "});",
                  "",
                  "pm.test(\"Provider services are properly formatted\", function () {",
                  "    const data = pm.response.json().data;",
                  "    pm.expect(data.services).to.be.an('array');",
                  "    ",
                  "    if (data.services.length > 0) {",
                  "        const service = data.services[0];",
                  "        pm.expect(service).to.have.property('id');",
                  "        pm.expect(service).to.have.property('name');",
                  "        pm.expect(service).to.have.property('price');",
                  "        pm.expect(service).to.have.property('duration');",
                  "        pm.expect(service).to.have.property('category');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Provider availability is valid\", function () {",
                  "    const data = pm.response.json().data;",
                  "    pm.expect(data.availability).to.be.an('object');",
                  "    ",
                  "    // Check for standard business days",
                  "    const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];",
                  "    days.forEach(day => {",
                  "        if (data.availability[day]) {",
                  "            pm.expect(data.availability[day]).to.have.property('open');",
                  "            pm.expect(data.availability[day]).to.have.property('close');",
                  "        }",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{provider_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/providers/{{test_provider_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "providers",
                "{{test_provider_id}}"
              ]
            },
            "description": "Retrieves detailed provider profile information including services, availability, and ratings."
          },
          "response": []
        },
        {
          "name": "Search Providers by Location",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Provider search completed successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.response.to.have.jsonBody(\"success\", true);",
                  "    pm.response.to.have.jsonBody(\"data\");",
                  "});",
                  "",
                  "pm.test(\"Search results have pagination\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('pagination');",
                  "    pm.expect(response.pagination).to.have.property('total');",
                  "    pm.expect(response.pagination).to.have.property('limit');",
                  "    pm.expect(response.pagination).to.have.property('offset');",
                  "});",
                  "",
                  "pm.test(\"Providers are sorted by distance\", function () {",
                  "    const data = pm.response.json().data;",
                  "    pm.expect(data).to.be.an('array');",
                  "    ",
                  "    if (data.length > 1) {",
                  "        for (let i = 0; i < data.length - 1; i++) {",
                  "            if (data[i].distance && data[i + 1].distance) {",
                  "                pm.expect(data[i].distance).to.be.at.most(data[i + 1].distance);",
                  "            }",
                  "        }",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Provider location data is valid\", function () {",
                  "    const data = pm.response.json().data;",
                  "    ",
                  "    data.forEach(provider => {",
                  "        if (provider.location) {",
                  "            pm.expect(provider.location).to.have.property('latitude');",
                  "            pm.expect(provider.location).to.have.property('longitude');",
                  "            pm.expect(provider.location.latitude).to.be.within(29, 34); // Jordan latitude range",
                  "            pm.expect(provider.location.longitude).to.be.within(34, 40); // Jordan longitude range",
                  "        }",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{customer_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/providers/search?latitude=31.9454&longitude=35.9284&radius=10&category=hair&limit=20",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "providers",
                "search"
              ],
              "query": [
                {
                  "key": "latitude",
                  "value": "31.9454",
                  "description": "Amman latitude"
                },
                {
                  "key": "longitude",
                  "value": "35.9284",
                  "description": "Amman longitude"
                },
                {
                  "key": "radius",
                  "value": "10",
                  "description": "Search radius in kilometers"
                },
                {
                  "key": "category",
                  "value": "hair",
                  "description": "Service category filter"
                },
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Number of results to return"
                }
              ]
            },
            "description": "Searches for providers within a specific geographical area with optional service category filtering."
          },
          "response": []
        },
        {
          "name": "Get Provider Availability",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Provider availability retrieved successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.response.to.have.jsonBody(\"success\", true);",
                  "    pm.response.to.have.jsonBody(\"data\");",
                  "});",
                  "",
                  "pm.test(\"Availability data is properly structured\", function () {",
                  "    const data = pm.response.json().data;",
                  "    pm.expect(data).to.have.property('date');",
                  "    pm.expect(data).to.have.property('availableSlots');",
                  "    pm.expect(data).to.have.property('bookedSlots');",
                  "    pm.expect(data).to.have.property('businessHours');",
                  "});",
                  "",
                  "pm.test(\"Available slots are in valid format\", function () {",
                  "    const data = pm.response.json().data;",
                  "    pm.expect(data.availableSlots).to.be.an('array');",
                  "    ",
                  "    data.availableSlots.forEach(slot => {",
                  "        pm.expect(slot).to.have.property('startTime');",
                  "        pm.expect(slot).to.have.property('endTime');",
                  "        pm.expect(slot).to.have.property('available');",
                  "        pm.expect(slot.startTime).to.match(/^\\d{2}:\\d{2}$/);",
                  "        pm.expect(slot.endTime).to.match(/^\\d{2}:\\d{2}$/);",
                  "    });",
                  "});",
                  "",
                  "pm.test(\"Business hours are within valid range\", function () {",
                  "    const data = pm.response.json().data;",
                  "    if (data.businessHours) {",
                  "        const openTime = data.businessHours.open;",
                  "        const closeTime = data.businessHours.close;",
                  "        ",
                  "        pm.expect(openTime).to.match(/^\\d{2}:\\d{2}$/);",
                  "        pm.expect(closeTime).to.match(/^\\d{2}:\\d{2}$/);",
                  "        ",
                  "        const openHour = parseInt(openTime.split(':')[0]);",
                  "        const closeHour = parseInt(closeTime.split(':')[0]);",
                  "        ",
                  "        pm.expect(openHour).to.be.at.least(6);",
                  "        pm.expect(closeHour).to.be.at.most(24);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{customer_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/providers/{{test_provider_id}}/availability?date={{booking_date}}&serviceId={{test_service_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "providers",
                "{{test_provider_id}}",
                "availability"
              ],
              "query": [
                {
                  "key": "date",
                  "value": "{{booking_date}}",
                  "description": "Date to check availability for"
                },
                {
                  "key": "serviceId",
                  "value": "{{test_service_id}}",
                  "description": "Service ID to check availability for"
                }
              ]
            },
            "description": "Retrieves provider availability for a specific date and service, showing available time slots."
          },
          "response": []
        },
        {
          "name": "Get Service Details",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Service details retrieved successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.response.to.have.jsonBody(\"success\", true);",
                  "    pm.response.to.have.jsonBody(\"data\");",
                  "});",
                  "",
                  "pm.test(\"Service has required fields\", function () {",
                  "    const data = pm.response.json().data;",
                  "    pm.expect(data).to.have.property('id');",
                  "    pm.expect(data).to.have.property('name');",
                  "    pm.expect(data).to.have.property('nameAr');",
                  "    pm.expect(data).to.have.property('price');",
                  "    pm.expect(data).to.have.property('duration');",
                  "    pm.expect(data).to.have.property('category');",
                  "    pm.expect(data).to.have.property('description');",
                  "});",
                  "",
                  "pm.test(\"Service pricing is valid\", function () {",
                  "    const data = pm.response.json().data;",
                  "    pm.expect(data.price).to.be.a('number');",
                  "    pm.expect(data.price).to.be.at.least(5); // Minimum service price in JOD",
                  "    pm.expect(data.price).to.be.at.most(500); // Maximum service price in JOD",
                  "    pm.expect(data.duration).to.be.a('number');",
                  "    pm.expect(data.duration).to.be.at.least(15); // Minimum 15 minutes",
                  "    pm.expect(data.duration).to.be.at.most(480); // Maximum 8 hours",
                  "});",
                  "",
                  "pm.test(\"Service has bilingual names\", function () {",
                  "    const data = pm.response.json().data;",
                  "    pm.expect(data.name).to.be.a('string');",
                  "    pm.expect(data.nameAr).to.be.a('string');",
                  "    pm.expect(data.nameAr).to.match(/[\\u0600-\\u06FF]/); // Contains Arabic characters",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{customer_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/services/{{test_service_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "services",
                "{{test_service_id}}"
              ]
            },
            "description": "Retrieves detailed information about a specific service including pricing, duration, and descriptions."
          },
          "response": []
        }
      ],
      "description": "Endpoints for managing providers, services, and availability. These endpoints support the provider marketplace functionality."
    }
  ],
  "variable": [
    {
      "key": "api_version",
      "value": "1.0",
      "type": "string"
    },
    {
      "key": "default_limit",
      "value": "20",
      "type": "string"
    },
    {
      "key": "default_timeout",
      "value": "30000",
      "type": "string"
    },
    {
      "key": "business_hours_start",
      "value": "08:00",
      "type": "string"
    },
    {
      "key": "business_hours_end",
      "value": "22:00",
      "type": "string"
    },
    {
      "key": "supported_languages",
      "value": "[\"ar\", \"en\"]",
      "type": "string"
    },
    {
      "key": "supported_payment_methods",
      "value": "[\"cash\", \"card\", \"online\"]",
      "type": "string"
    },
    {
      "key": "booking_statuses",
      "value": "[\"pending\", \"confirmed\", \"completed\", \"cancelled\", \"no_show\"]",
      "type": "string"
    },
    {
      "key": "jordan_phone_prefixes",
      "value": "[\"77\", \"78\", \"79\"]",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{customer_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script for all requests",
          "",
          "// Set common headers",
          "pm.request.headers.add({",
          "    key: \"Content-Type\",",
          "    value: \"application/json\"",
          "});",
          "",
          "// Add timestamp for tracking",
          "pm.environment.set(\"last_request_time\", new Date().toISOString());",
          "",
          "// Generate request ID for tracking",
          "pm.environment.set(\"request_id\", \"req_\" + Date.now() + \"_\" + Math.random().toString(36).substr(2, 9));",
          "",
          "// Log request details",
          "console.log(\"Making request to:\", pm.request.url);",
          "console.log(\"Request ID:\", pm.environment.get(\"request_id\"));",
          "",
          "// Ensure required environment variables are set",
          "const requiredVars = ['base_url'];",
          "const missingVars = requiredVars.filter(varName => !pm.environment.get(varName));",
          "",
          "if (missingVars.length > 0) {",
          "    console.warn(\"Missing required environment variables:\", missingVars);",
          "}",
          "",
          "// Set default values if not present",
          "if (!pm.environment.get(\"base_url\")) {",
          "    pm.environment.set(\"base_url\", \"http://localhost:3000\");",
          "    console.log(\"Set default base_url to localhost\");",
          "}",
          "",
          "// Generate future date if not set",
          "if (!pm.environment.get(\"future_date\")) {",
          "    const futureDate = new Date();",
          "    futureDate.setDate(futureDate.getDate() + 3);",
          "    pm.environment.set(\"future_date\", futureDate.toISOString().split('T')[0]);",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script for all requests",
          "",
          "// Basic response validation",
          "pm.test(\"Response status is valid\", function () {",
          "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401, 403, 404, 409, 422, 429, 500]);",
          "});",
          "",
          "// Response time validation",
          "pm.test(\"Response time is acceptable\", function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "// JSON response validation",
          "if (pm.response.headers.get(\"Content-Type\") && pm.response.headers.get(\"Content-Type\").includes(\"application/json\")) {",
          "    pm.test(\"Response is valid JSON\", function () {",
          "        pm.response.to.be.json;",
          "    });",
          "    ",
          "    pm.test(\"Response has success field\", function () {",
          "        pm.response.to.have.jsonBody(\"success\");",
          "    });",
          "}",
          "",
          "// Rate limiting headers validation",
          "pm.test(\"Rate limit headers present\", function () {",
          "    if (pm.response.headers.has(\"X-RateLimit-Limit\")) {",
          "        pm.response.to.have.header(\"X-RateLimit-Remaining\");",
          "        pm.response.to.have.header(\"X-RateLimit-Reset\");",
          "    }",
          "});",
          "",
          "// Security headers validation",
          "pm.test(\"Security headers present\", function () {",
          "    // Check for common security headers",
          "    const securityHeaders = ['X-Content-Type-Options', 'X-Frame-Options', 'X-XSS-Protection'];",
          "    securityHeaders.forEach(header => {",
          "        if (pm.response.headers.has(header)) {",
          "            pm.expect(pm.response.headers.get(header)).to.be.a('string');",
          "        }",
          "    });",
          "});",
          "",
          "// Log response details",
          "console.log(\"Response Status:\", pm.response.status);",
          "console.log(\"Response Time:\", pm.response.responseTime + \"ms\");",
          "console.log(\"Request ID:\", pm.environment.get(\"request_id\"));",
          "",
          "// Store response data for debugging",
          "if (pm.response.json && pm.response.json().success === false) {",
          "    console.log(\"Error Response:\", pm.response.json());",
          "}",
          "",
          "// Jordan-specific validations",
          "if (pm.response.json && pm.response.json().data) {",
          "    const data = pm.response.json().data;",
          "    ",
          "    // Phone number validation",
          "    if (data.phone || data.userPhone) {",
          "        const phone = data.phone || data.userPhone;",
          "        pm.test(\"Phone number is in Jordanian format\", function () {",
          "            pm.expect(phone).to.match(/^\\+962(77|78|79)\\d{7}$/);",
          "        });",
          "    }",
          "    ",
          "    // Currency validation",
          "    if (data.amount || data.price) {",
          "        const amount = data.amount || data.price;",
          "        pm.test(\"Amount is in valid JOD format\", function () {",
          "            pm.expect(amount).to.be.a('number');",
          "            pm.expect(amount).to.be.at.least(0);",
          "            pm.expect(amount).to.be.at.most(1000);",
          "        });",
          "    }",
          "    ",
          "    // Arabic content validation",
          "    if (data.providerName || data.serviceName) {",
          "        const arabicText = data.providerName || data.serviceName;",
          "        if (arabicText && typeof arabicText === 'string') {",
          "            pm.test(\"Arabic content is present\", function () {",
          "                pm.expect(arabicText).to.match(/[\\u0600-\\u06FF]/);",
          "            });",
          "        }",
          "    }",
          "}"
        ]
      }
    }
  ]
}